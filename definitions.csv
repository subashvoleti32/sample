grouping_description,element_name,channel_name,start_day,end_day,start_time,end_time,include_program_type_name,program_type_name,include_program_event_name,program_event_name,include_program_name,program_name
AA,BADAMI,BDM,0,6,06:00:00,02:00:00,,,,,,
AA,BET,BET,0,6,06:00:00,02:00:00,,,,,,
AA,BET_HER,BHER,0,6,06:00:00,02:00:00,,,,,,
AA,BOUNCE,BOU,0,6,06:00:00,02:00:00,,,,,,
AA,CLEO_TV,CLEO,0,6,06:00:00,02:00:00,,,,,,
AA,COMEDY_TV,CDTV,0,6,06:00:00,03:00:00,,,,,1.0,COMEDY.TV;COMICS UNLEASHED;WORLDS FUNNIEST WEATHER
AA,COURT_COMBO,CFE,0,6,06:00:00,03:00:00,,,,,1.0,ES COURT COMBO
AA,ES_SPECIALS,CFE,0,6,06:00:00,03:00:00,,,,,1.0,WE HAVE A DREAM;FEEL THE BEAT;HAPPY HOLIDAYS AMERICA
AA,FUNNY_YOU_SHOULD_ASK,CFE,0,6,06:00:00,03:00:00,,,,,1.0,FUNNY YOU SHOULD ASK (AT)
AA,OWN,OWN,0,6,06:00:00,02:00:00,,,,,,
AA,TVONE,TV1,0,6,06:00:00,02:00:00,,,,,,
AA,WEATHER_COMBO,CFE,0,6,06:00:00,03:00:00,,,,,1.0,WEATHER COMBO
BROADCAST_NEWS,ABC_EARLY_MORNING,ABC,0,4,06:00:00,08:00:00,,,,,,
BROADCAST_NEWS,ABC_EVENING,ABC,0,6,18:30:00,19:00:00,1.0,NEWS,,,,
BROADCAST_NEWS,ABC_NIGHTLINE,ABC,0,4,00:35:00,01:35:00,,,,,,
BROADCAST_NEWS,CBS_EARLY_MORNING,CBS,0,4,06:00:00,08:00:00,,,,,,
BROADCAST_NEWS,CBS_EVENING,CBS,0,6,18:00:00,19:00:00,1.0,NEWS,,,,
BROADCAST_NEWS,CBS_SUNDAY_MORNING,CBS,6,6,09:00:00,09:30:00,,,,,,
BROADCAST_NEWS,ITN_EARLY_MORNING,ITN,0,6,06:00:00,03:00:00,,,,,1.0,ITN EARLY MORN A;ITN EARLY MORN B;ITN EARLY MORN C;ITN EARLY MORN D;ITN EARLY MORN E;ITN EARLY MORN F;ITN EARLY MORN G;ITN EARLY MORN H;ITN EARLY MORN I;ITN EARLY MORN J;ITN EARLY MORN K;ITN EARLY MORN L;ITN EARLY MORN M;ITN EARLY MORN N;ITN EARLY MORN O
BROADCAST_NEWS,ITN_EVENING,ITN,0,6,06:00:00,03:00:00,,,,,1.0,ITN EVENING NEWS A;ITN EVENING NEWS B;ITN EVENING NEWS C;ITN EVENING NEWS D;ITN EVENING NEWS E;ITN EVENING NEWS F;ITN EVENING NEWS G;ITN EVENING NEWS H;ITN EVENING NEWS I;ITN EVENING NEWS J;ITN EVENING NEWS K;ITN EVENING NEWS L
BROADCAST_NEWS,NBC_EARLY_TODAY,NBC,0,4,04:00:00,07:00:00,,,,,,
BROADCAST_NEWS,NBC_EM_TODAY_1_W_WE,NBC,0,5,07:00:00,08:00:00,,,,,,
BROADCAST_NEWS,NBC_EM_TODAY_2,NBC,0,4,08:00:00,09:00:00,,,,,,
BROADCAST_NEWS,NBC_EM_TODAY_3,NBC,0,4,09:00:00,10:00:00,,,,,,
BROADCAST_NEWS,NBC_NIGHTLY,NBC,0,6,18:30:00,19:00:00,1.0,NEWS,,,,



  gcloud spanner databases ddl update deals-db --instance=deals-instance --ddl "CREATE TABLE deals_attribute (country_code STRING(2),attributes JSON) PRIMARY KEY (country_code)"

  def read_csv_file(csv_file_path):
    data = []
    with open(csv_file_path, newline="", encoding="utf-8-sig") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            data.append(row)
    return data

  attributes = {  # type: ignore
        "US": {},
    }
    for attr in data:
        country = attr["country_code"]
        if country not in attributes:
            attributes[country] = {}

        name = attr["attribute_name"]
        value = attr["attribute_value"]
        label = attr["value_label"]
        if len(label) == 0:
            label = value
        if name not in attributes[country]:
            attributes[country][name] = {
                "country": country,
                "name": name,
                "name_label": name.replace("_", " ").title(),
                "values": {value: {"label": label, "description": label}},
            }
        else:
            attributes[country][name]["values"][value] = {
                "label": label,
                "description": label,
            }


sample_data = {
        "channel_name":{
            "deal_name": "channel_name",
            "deal_values": [
                {"value": "ABC"},
                {"value": "ADSM"},
                {"value": "AMC"}
            ]
        },
        "Type":{
            "deal_values": [
                {"value": "BroadCast"},
                {"value": "Cable"},
                {"value": "Sports"}
            ]
        },
        "start_day":{
            "deal_values": [
                {"value": "0"},
                {"value": "1"},
                {"value": "2"},
                {"value": "3"},
                {"value": "4"},
                {"value": "5"},
            ]
        },
        "end_day":{
            "deal_values": [
                {"value": "0"},
                {"value": "1"},
                {"value": "2"},
                {"value": "3"},
                {"value": "4"},
                {"value": "5"},
            ]
        },
        "start_time":{
            "deal_values": "current time-1year below"
        },
        "end_time":{
            "deal_values": "current time"
        },
        "include_program_type_name":{
            "deal_values": [
                {"value": "True"},
                {"value": "False"}
            ]
        },
        "program_type_name":{
            "deal_values": [
                {"value": "sports"},
                {"value": "chess"},
                {"value": "hockey"},
                {"value": "football"},
                {"value": "cricket"},
                {"value": "rubi"}
            ]
        },
        "include_program_event_name":{
            "deal_values": [
                {"value": "True"},
                {"value": "False"}
            ]
        },
        "program_event_name":{
            "deal_values": [
                {"value": "a"},
                {"value": "b"},
                {"value": "c"},
                {"value": "d"},
                {"value": "e"},
                {"value": "f"}
            ]
        },
        "include_program_name":{
            "deal_values": [
                {"value": "True"},
                {"value": "False"}
            ]
        },
       "program_event_name": {
            "deal_values": [
                {"value": "a"},
                {"value": "b"},
                {"value": "c"},
                {"value": "d"},
                {"value": "e"},
                {"value": "f"}
            ]
        }
}


import csv

# Read the CSV file and store data in a list of dictionaries
def read_csv_file(csv_file_path):
    data = []
    with open(csv_file_path, newline="", encoding="utf-8-sig") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            data.append(row)
    return data

# Initialize the sample_data dictionary
sample_data = {}

# Define the columns that need special handling
special_handling_columns = ["channel_name", "Type", "include_program_type_name", "program_type_name",
                            "include_program_event_name", "program_event_name", "include_program_name"]

# Iterate through each row in the CSV data
for row in read_csv_file("data.csv"):
    for column, value in row.items():
        # If the column needs special handling
        if column in special_handling_columns:
            if column not in sample_data:
                sample_data[column] = {"deal_values": []}
            # Handle start_time and end_time specially
            if column == "start_time":
                # You can implement the logic to calculate "current time - 1 year below" here
                # For now, let's assume a placeholder value
                value = "current time - 1 year below"
            elif column == "end_time":
                # You can implement the logic to get the current time here
                # For now, let's assume a placeholder value
                value = "current time"
            sample_data[column]["deal_values"].append({"value": value})
        else:
            # For other columns, create a separate "deal_name" entry
            if column not in sample_data:
                sample_data[column] = {"deal_name": column, "deal_values": []}
            sample_data[column]["deal_values"].append({"value": value})

# Print the resulting sample_data
print(sample_data)



from fastapi import FastAPI, HTTPException, Form

app = FastAPI()

def convert_csv_to_sample_data(csv_content: str):
    # Parse the CSV content and convert it to the desired format
    sample_data = {}
    lines = csv_content.strip().split('\n')
    header = lines[0].split(',')
    for column in header:
        sample_data[column] = {"deal_name": column, "deal_values": []}
    
    for line in lines[1:]:
        values = line.split(',')
        for i, column in enumerate(header):
            sample_data[column]["deal_values"].append(values[i])
    
    # Define static values for start_time and end_time
    sample_data["start_time"]["deal_values"] = "current time-1year below"
    sample_data["end_time"]["deal_values"] = "current time"
    
    return sample_data

@app.post("/convert-csv/")
async def convert_csv_to_sample_data(csv_content: str = Form(...)):
    try:
        sample_data = convert_csv_to_sample_data(csv_content)
        return sample_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
