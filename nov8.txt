from http import HTTPStatus

class BaseExceptionClass(Exception):
    def __init__(self, status_code: int, description: str, data: dict):
        self.exception_case = self.__class__.__name__
        self.status_code = status_code
        self.data = data
        self.description = description

    def __str__(self):
        return (
                f"<Exception: " f"status_code: {self.status_code} "
                + f"Details: {self.description} - " f"Data: {self.data}>"
        )

class AppException(object):
    class DuplicateName(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.CONFLICT,
                     description: str = " Duplicate Name: ",
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)

    class UserNotFound(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.NOT_FOUND,
                     description: str = " User Not Found: ",
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)

    class DatabaseException(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.INTERNAL_SERVER_ERROR,
                     description: str = 'Database Error: ',
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)
    class PostRequestException(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.INTERNAL_SERVER_ERROR,
                     description: str = 'PostRequest Error: ',
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)
    class GetRequestException(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.INTERNAL_SERVER_ERROR,
                     description: str = 'GetRequest Error: ',
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)
    class PutRequestException(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.INTERNAL_SERVER_ERROR,
                     description: str = 'PutRequest Error: ',
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)
    class DeleteRequestException(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.INTERNAL_SERVER_ERROR,
                     description: str = 'DeleteRequest Error: ',
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)

------------------
import functools

def handle_errors(func):
    @functools.wraps(func)
    def wrapper_decorator(*args, **kwargs):
        # Do something before
        try:
           return func(*args, **kwargs)
        except Exception as e:
            app_logger.info(f"Request Error:{str(e)}")
            description = "Error while doing {func.__name__}:"
            raise AppException.PostRequestException(status_code = HTTPStatus.INTERNAL_SERVER_ERROR,description = description, data={'error_message': str(e)})
    return wrapper_decorator
----------------------------
    @handle_errors
    def post(self):
        input_json = request.get_json()
        Optimization = optimization_service.create(input_json=input_json)
        return Optimization


------
class OptimizationsResource(Resource):
    def get(self):
        try:
            args = request.args           
            rpp = int(args.get('rpp')) if args.get('rpp') else 50
            page = int(args.get('page')) if args.get('page') else 0
            country = str(args.get('country')) if args.get('country') else None
            category = str(args.get('category')) if args.get('category') else None
            status = (str(args.get('status')).split(',')) if args.get('status') else None
            app_logger.info(f"rpp value:{rpp}, page:{page}, country:{country},category:{category},Status:{status}")
            optimizations = optimization_service.get_optimizations(rpp=rpp,page=page,country=country,category=category, status=status )
            return optimizations
        except Exception as e:
            print("hi")
            app_logger.info(f"Get Request Error:{str(e)}")
            description="Error while optimization_resource_by_country"
            raise AppException.GetRequestException(
                status_code=HTTPStatus.INTERNAL_SERVER_ERROR,
                description=description,
                data={'error_message': str(e)}
            )
