@display_audience_route.get('/audience',tags=["DisplayAudience"])
def get_audience_response():
    res= AudienceAttributeService().get_audience_response()
    return {"audiences":[AudienceSchemaResponse(**dict(zip(AudienceSchemaResponse.__fields__,item))) for item in res]}

class AudienceSchemaResponse(BaseModel):
    name:str
    description:str
    gender:str
    minimum_age:int
    maximum_age:int
    country:str
    attributes:Dict

def get_audience_response(self):
        try:
            # db_res2 = self.db.query(value_label).filter(value_label.c.attribute_value == attribute_value and value_label.c.country_code == country_name)
            db_res2 = self.db.query(audience_table_create).all()
            #db_res1 = self.db.query(audience_table,value_label).filter(audience_table_create.c.Country == value_label.c.country_code)
            return db_res2
        except Exception as e:
            print(f"Exception is {e}")
        finally:
            self.db.close()


{

              min_age: 16,

              max_age: 120,

              country: 'CA',

              gender: {

                 attribute_value: [

                    {

                      value: 'Male',

                      label: 'm',

                    },

                    {

                      value: 'Female',

                      label: 'f',

                    },

                  ],

              },


              audience_attributes: [

                {

                  attribute_name: 'region',

                  attribute_value: [

                    {

                      value: 'national',

                      label: 'English Speaking Regions',

                    },

                    {

                      value: 'quebec',

                      label: 'French Speaking Regions',

                    },

                  ],

                },

              ],

            }




def get_audiences_template(country: str):
    response = {}
    existing_countries = {}
    for template in TEMPLATES:
        existing_countries[template['country']] = existing_countries.get(template['country'], 0) + 1 

    if existing_countries.get(country, 0) > 1:
        raise HTTPException(status_code=404,detail=f"Country template {country} is already present.It cannot be duplicated")
    
    for template in TEMPLATES:
        if template["country"] == country:
            response["min_age"] = template["min_age"]
            response["max_age"] = template["max_age"]
            response["country"] = template["country"]
            response["audience_attributes"] = []

            for attribute in template["audience_attributes"]:
                attribute_values = []

                for attr_value in ATTRIBUTE_VALUES:
                    if (
                        attr_value["Country"] == country
                        and attr_value["Parent Attribute Name"] == attribute
                    ):
                        attribute_values.append(
                            {
                                "value": attr_value["Audience Attribute Value"],
                                "label": attr_value["Audience Attribute Label"],
                            }
                        )

                response["audience_attributes"].append(
                    {
                        "attribute_name": attribute,
                        "attribute_value": attribute_values
                    }
                )

            break
    else:
        raise HTTPException(status_code=404,detail="Country Not found")

    return response

