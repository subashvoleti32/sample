from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship, declarative_base, sessionmaker
from fastapi import FastAPI
from pydantic import BaseModel
from typing import List

# Create a SQLite database engine
DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(DATABASE_URL)

# Create a SQLAlchemy session
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Create a declarative base
Base = declarative_base()

# Define the SQLAlchemy models
class Customer(Base):
    __tablename__ = "Customer"

    custid = Column(Integer, primary_key=True, index=True)
    lastname = Column(String)
    firstname = Column(String)
    idf_proof = Column(String)
    idnumber = Column(String)
    phone_number_id = Column(Integer, ForeignKey('PHONENUMBER.phone_number'))
    address = Column(String)
    dob = Column(String)
    phone_number = relationship("PhoneNumber", back_populates="customer")

class Tickets(Base):
    __tablename__ = "Tickets"

    Ticketid = Column(Integer, primary_key=True, index=True)
    phone_number_id = Column(Integer, ForeignKey('PHONENUMBER.phone_number'))
    custid = Column(Integer, ForeignKey('Customer.custid'))
    staffid = Column(Integer, ForeignKey('Staff.staffid'))
    TicketStatus = Column(String)
    Description = Column(String)

class Staff(Base):
    __tablename__ = "Staff"

    staffid = Column(Integer, primary_key=True, index=True)
    address = Column(String)
    idproof = Column(String)
    idnumber = Column(String)
    firstname = Column(String)
    lastname = Column(String)

class PhoneNumber(Base):
    __tablename__ = "PHONENUMBER"

    phone_number = Column(Integer, primary_key=True, index=True)
    type = Column(String)
    plan = Column(String)
    customer = relationship("Customer", back_populates="phone_number")

class Bill(Base):
    __tablename__ = "Bill"

    Billid = Column(Integer, primary_key=True, index=True)
    phone_number_id = Column(Integer, ForeignKey('PHONENUMBER.phone_number'))
    Amount = Column(Integer)

# Create tables in the database
Base.metadata.create_all(bind=engine)

# FastAPI app
app = FastAPI()

# Pydantic models for input and output
class CustomerCreate(BaseModel):
    lastname: str
    firstname: str
    idf_proof: str
    idnumber: str
    phone_number_id: int
    address: str
    dob: str

class CustomerResponse(BaseModel):
    custid: int
    lastname: str
    firstname: str
    idf_proof: str
    idnumber: str
    phone_number_id: int
    address: str
    dob: str

class TicketCreate(BaseModel):
    phone_number_id: int
    custid: int
    staffid: int
    TicketStatus: str
    Description: str

class TicketResponse(BaseModel):
    Ticketid: int
    phone_number_id: int
    custid: int
    staffid: int
    TicketStatus: str
    Description: str

class StaffCreate(BaseModel):
    address: str
    idproof: str
    idnumber: str
    firstname: str
    lastname: str

class StaffResponse(BaseModel):
    staffid: int
    address: str
    idproof: str
    idnumber: str
    firstname: str
    lastname: str

class PhoneNumberCreate(BaseModel):
    type: str
    plan: str

class PhoneNumberResponse(BaseModel):
    phone_number: int
    type: str
    plan: str

class BillCreate(BaseModel):
    phone_number_id: int
    Amount: int

class BillResponse(BaseModel):
    Billid: int
    phone_number_id: int
    Amount: int

# Define FastAPI endpoints to create and retrieve data
@app.post("/customers/", response_model=CustomerResponse)
def create_customer(customer: CustomerCreate):
    db = SessionLocal()
    db_customer = Customer(**customer.dict())
    db.add(db_customer)
    db.commit()
    db.refresh(db_customer)
    db.close()
    return db_customer

@app.post("/tickets/", response_model=TicketResponse)
def create_ticket(ticket: TicketCreate):
    db = SessionLocal()
    db_ticket = Tickets(**ticket.dict())
    db.add(db_ticket)
    db.commit()
    db.refresh(db_ticket)
    db.close()
    return db_ticket

@app.post("/staff/", response_model=StaffResponse)
def create_staff(staff: StaffCreate):
    db = SessionLocal()
    db_staff = Staff(**staff.dict())
    db.add(db_staff)
    db.commit()
    db.refresh(db_staff)
    db.close()
    return db_staff

@app.post("/phone_numbers/", response_model=PhoneNumberResponse)
def create_phone_number(phone_number: PhoneNumberCreate):
    db = SessionLocal()
    db_phone_number = PhoneNumber(**phone_number.dict())
    db.add(db_phone_number)
    db.commit()
    db.refresh(db_phone_number)
    db.close()
    return db_phone_number

@app.post("/bills/", response_model=BillResponse)
def create_bill(bill: BillCreate):
    db = SessionLocal()
    db_bill = Bill(**bill.dict())
    db.add(db_bill)
    db.commit()
    db.refresh(db_bill)
    db.close()
    return db_bill

@app.get("/customers/{custid}", response_model=CustomerResponse)
def read_customer(custid: int):
    db = SessionLocal()
    customer = db.query(Customer).filter(Customer.custid == custid).first()
    db.close()
    return customer

@app.get("/tickets/{Ticketid}", response_model=TicketResponse)
def read_ticket(Ticketid: int):
    db = SessionLocal()
    ticket = db.query(Tickets).filter(Tickets.Ticketid == Ticketid).first()
    db.close()
    return ticket

@app.get("/staff/{staffid}", response_model=StaffResponse)
def read_staff(staffid: int):
    db = SessionLocal()
    staff = db.query(Staff).filter(Staff.staffid == staffid).first()
    db.close()
    return staff

@app.get("/phone_numbers/{phone_number}", response_model=PhoneNumberResponse)
def read_phone_number(phone_number: int):
    db = SessionLocal()
    phone_number = db.query(PhoneNumber).filter(PhoneNumber.phone_number == phone_number).first()
    db.close()
    return phone_number

@app.get("/bills/{Billid}", response_model=BillResponse)
def read_bill(Billid: int):
    db = SessionLocal()
    bill = db.query(Bill).filter(Bill.Billid == Billid).first()
    db.close()
    return bill

@app.get("/customers/", response_model=List[CustomerResponse])
def read_customers(skip: int = 0, limit: int = 100):
    db = SessionLocal()
    customers = db.query(Customer).offset(skip).limit(limit).all()
    db.close




2023-10-09 12:03:22,793 INFO sqlalchemy.engine.Engine INSERT INTO "Customer" (lastname, firstname, idf_proof, idnumber, phone_number_id, address, dob) VALUES (?, ?, ?, ?, ?, ?, ?)
2023-10-09 12:03:22,794 INFO sqlalchemy.engine.Engine [generated in 0.00098s] ('mahesh', 'asdf', 'a', 'asdf', 7288099822, 'as', 'a')
2023-10-09 12:03:22,797 INFO sqlalchemy.engine.Engine COMMIT
2023-10-09 12:03:22,806 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2023-10-09 12:03:22,810 INFO sqlalchemy.engine.Engine SELECT "Customer".custid, "Customer".lastname, "Customer".firstname, "Customer".idf_proof, "Customer".idnumber, "Customer".phone_number_id, "Customer".address, "Customer".dob
FROM "Customer"
WHERE "Customer".custid = ?
2023-10-09 12:03:22,811 INFO sqlalchemy.engine.Engine [generated in 0.00101s] (1,)
2023-10-09 12:03:22,813 INFO sqlalchemy.engine.Engine ROLLBACK
INFO:     127.0.0.1:64244 - "POST /customers/ HTTP/1.1" 500 Internal Server Error
ERROR:    Exception in ASGI application
Traceback (most recent call last):
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\uvicorn\protocols\http\h11_impl.py", line 428, in run_asgi
    result = await app(  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\uvicorn\middleware\proxy_headers.py", line 78, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\applications.py", line 276, in __call__
    await super().__call__(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\applications.py", line 122, in __call__
    await self.middleware_stack(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\errors.py", line 184, in __call__
    raise exc
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\errors.py", line 162, in __call__
    await self.app(scope, receive, _send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\exceptions.py", line 79, in __call__
    raise exc
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\exceptions.py", line 68, in __call__
    await self.app(scope, receive, sender)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\middleware\asyncexitstack.py", line 21, in __call__
    raise e
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\middleware\asyncexitstack.py", line 18, in __call__
    await self.app(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\routing.py", line 718, in __call__
    await route.handle(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\routing.py", line 276, in handle
    await self.app(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\routing.py", line 66, in app
    response = await func(request)
               ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\routing.py", line 255, in app
    content = await serialize_response(
              ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\routing.py", line 141, in serialize_response
    raise ValidationError(errors, field.type_)
pydantic.error_wrappers.ValidationError: 1 validation error for CustomerResponse
response
  value is not a valid dict (type=type_error.dict)













(Background on this error at: http://sqlalche.me/e/14/gkpj)
2023-10-09 12:07:13,382 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2023-10-09 12:07:13,382 INFO sqlalchemy.engine.Engine INSERT INTO "Customer" (custid, lastname, firstname, idf_proof, idnumber, phone_number_id, address, dob) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
2023-10-09 12:07:13,383 INFO sqlalchemy.engine.Engine [cached since 24.75s ago] (9, 'voleti', 'subash', 'aadhar', '1', 7288099822, 'abcd', 'march')
2023-10-09 12:07:13,385 INFO sqlalchemy.engine.Engine COMMIT
2023-10-09 12:07:13,393 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2023-10-09 12:07:13,398 INFO sqlalchemy.engine.Engine SELECT "Customer".custid, "Customer".lastname, "Customer".firstname, "Customer".idf_proof, "Customer".idnumber, "Customer".phone_number_id, "Customer".address, "Customer".dob
FROM "Customer"
WHERE "Customer".custid = ?
2023-10-09 12:07:13,399 INFO sqlalchemy.engine.Engine [generated in 0.00083s] (9,)
2023-10-09 12:07:13,400 INFO sqlalchemy.engine.Engine ROLLBACK
INFO:     127.0.0.1:64714 - "POST /customers/ HTTP/1.1" 500 Internal Server Error
ERROR:    Exception in ASGI application
Traceback (most recent call last):
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\uvicorn\protocols\http\h11_impl.py", line 428, in run_asgi
    result = await app(  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\uvicorn\middleware\proxy_headers.py", line 78, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\applications.py", line 276, in __call__
    await super().__call__(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\applications.py", line 122, in __call__
    await self.middleware_stack(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\errors.py", line 184, in __call__
    raise exc
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\errors.py", line 162, in __call__
    await self.app(scope, receive, _send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\exceptions.py", line 79, in __call__
    raise exc
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\exceptions.py", line 68, in __call__
    await self.app(scope, receive, sender)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\middleware\asyncexitstack.py", line 21, in __call__
    raise e
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\middleware\asyncexitstack.py", line 18, in __call__
    await self.app(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\routing.py", line 718, in __call__
    await route.handle(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\routing.py", line 276, in handle
    await self.app(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\routing.py", line 66, in app
    response = await func(request)
               ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\routing.py", line 255, in app
    content = await serialize_response(
              ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\routing.py", line 141, in serialize_response
    raise ValidationError(errors, field.type_)
pydantic.error_wrappers.ValidationError: 1 validation error for CustomerResponse
response
  value is not a valid dict (type=type_error.dict)










2023-10-09 12:21:50,494 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2023-10-09 12:21:50,496 INFO sqlalchemy.engine.Engine INSERT INTO "PHONENUMBER" (phone_number, type, "plan") VALUES (?, ?, ?)
2023-10-09 12:21:50,496 INFO sqlalchemy.engine.Engine [generated in 0.00049s] (7288099822, 'phone', 'phone')
2023-10-09 12:21:50,506 INFO sqlalchemy.engine.Engine COMMIT
2023-10-09 12:21:50,516 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2023-10-09 12:21:50,519 INFO sqlalchemy.engine.Engine SELECT "PHONENUMBER".phone_number, "PHONENUMBER".type, "PHONENUMBER"."plan"
FROM "PHONENUMBER"
WHERE "PHONENUMBER".phone_number = ?
2023-10-09 12:21:50,519 INFO sqlalchemy.engine.Engine [generated in 0.00123s] (7288099822,)
2023-10-09 12:21:50,521 INFO sqlalchemy.engine.Engine ROLLBACK
INFO:     127.0.0.1:49357 - "POST /phone_numbers/ HTTP/1.1" 500 Internal Server Error
ERROR:    Exception in ASGI application
Traceback (most recent call last):
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\uvicorn\protocols\http\h11_impl.py", line 428, in run_asgi
    result = await app(  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\uvicorn\middleware\proxy_headers.py", line 78, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\applications.py", line 276, in __call__
    await super().__call__(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\applications.py", line 122, in __call__
    await self.middleware_stack(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\errors.py", line 184, in __call__
    raise exc
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\errors.py", line 162, in __call__
    await self.app(scope, receive, _send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\exceptions.py", line 79, in __call__
    raise exc
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\middleware\exceptions.py", line 68, in __call__
    await self.app(scope, receive, sender)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\middleware\asyncexitstack.py", line 21, in __call__
    raise e
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\middleware\asyncexitstack.py", line 18, in __call__
    await self.app(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\routing.py", line 718, in __call__
    await route.handle(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\routing.py", line 276, in handle
    await self.app(scope, receive, send)
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\starlette\routing.py", line 66, in app
    response = await func(request)
               ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\routing.py", line 255, in app
    content = await serialize_response(
              ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\fastapi\routing.py", line 141, in serialize_response
    raise ValidationError(errors, field.type_)
pydantic.error_wrappers.ValidationError: 1 validation error for PhoneNumberResponse
response
  value is not a valid dict (type=type_error.dict)





<!DOCTYPE html>
<html>
<head>
    <title>Customer Management System</title>
    <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
    <h1>Customer Management System</h1>

    <h2>Create Customer</h2>
    <form id="createCustomerForm">
        <label for="lastname">Last Name:</label>
        <input type="text" id="lastname" name="lastname" required>
        <br>
        <!-- Add fields for other customer attributes -->
        <br>
        <button type="button" onclick="createCustomer()">Create Customer</button>
    </form>

    <h2>Get Customer</h2>
    <form id="getCustomerForm">
        <label for="custid">Customer ID:</label>
        <input type="number" id="custid" name="custid" required>
        <button type="button" onclick="getCustomer()">Get Customer</button>
    </form>

    <h2>List Customers</h2>
    <button type="button" onclick="listCustomers()">List Customers</button>
    <ul id="customerList"></ul>

    <script src="app.js"></script>
</body>
</html>



app.js:-

const apiUrl = "http://localhost:8000"; // Replace with your FastAPI server address

function createCustomer() {
    const form = document.getElementById("createCustomerForm");
    const formData = new FormData(form);
    fetch(`${apiUrl}/customers/`, {
        method: "POST",
        body: formData,
    })
    .then(response => response.json())
    .then(data => {
        alert("Customer created successfully.");
        form.reset();
    })
    .catch(error => {
        console.error("Error creating customer:", error);
    });
}

function getCustomer() {
    const custid = document.getElementById("custid").value;
    fetch(`${apiUrl}/customers/${custid}`)
    .then(response => response.json())
    .then(data => {
        alert(`Customer found: ${JSON.stringify(data)}`);
    })
    .catch(error => {
        console.error("Error getting customer:", error);
    });
}

function listCustomers() {
    fetch(`${apiUrl}/customers/`)
    .then(response => response.json())
    .then(data => {
        const customerList = document.getElementById("customerList");
        customerList.innerHTML = "";
        data.forEach(customer => {
            const listItem = document.createElement("li");
            listItem.innerText = `${customer.custid}: ${customer.firstname} ${customer.lastname}`;
            customerList.appendChild(listItem);
        });
    })
    .catch(error => {
        console.error("Error listing customers:", error);
    });
}


Access to fetch at 'http://localhost:8000/customers/' from origin 'null' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.
app.js:26     POST http://localhost:8000/customers/ net::ERR_FAILED 422 (Unprocessable Entity)
createCustomer @ app.js:26
onclick @ index.html:40
app.js:36 Error creating customer: TypeError: Failed to fetch
    at createCustomer (app.js:26:11)
    at HTMLButtonElement.onclick (index.html:40:58)
(anonymous) @ app.js:36
Promise.catch (async)
createCustomer @ app.js:35
onclick @ index.html:40











const apiUrl = "http://localhost:8000"; // Replace with your FastAPI server address

async function createCustomer() {
    const form = document.getElementById("createCustomerForm");
    const lastname = document.getElementById("lastname").value;
    const firstname = document.getElementById("firstname").value;
    const id_type = document.getElementById("id_type").value;
    const idnum = document.getElementById("idnum").value;
    const address = document.getElementById("address").value;
    const dob = document.getElementById("dob").value;
    const email = document.getElementById("email").value;
    const body = {
        "lastname":lastname,
        "firstname":firstname,
        "id_type":id_type,
        "idnum":idnum,
        "address":address,
        "dob":dob,
        "email":email
    }
    console.log(body)
    const portnum=location.port
    console.log(portnum)
    console.log(window.location.href)
    console.log(`${apiUrl}/customers/`)
    await fetch(`${apiUrl}/customers/`, {
        method: "POST",
        body: JSON.stringify(body),
    })
    .then(response => response.json())
    .then(data => {
        alert("Customer created successfully.");
        form.reset();
    })
    .catch(error => {
        console.error("Error creating customer:", error);
    });
}

function getCustomer() {
    const custid = document.getElementById("custid").value;
    fetch(`${apiUrl}/customers/${custid}`)
    .then(response => response.json())
    .then(data => {
        alert(`Customer found: ${JSON.stringify(data)}`);
    })
    .catch(error => {
        console.error("Error getting customer:", error);
    });
}

function listCustomers() {
    fetch(`${apiUrl}/customers/`)
    .then(response => response.json())
    .then(data => {
        const customerList = document.getElementById("customerList");
        customerList.innerHTML = "";
        data.forEach(customer => {
            const listItem = document.createElement("li");
            listItem.innerText = `${customer.custid}: ${customer.firstname} ${customer.lastname}`;
            customerList.appendChild(listItem);
        });
    })
    .catch(error => {
        console.error("Error listing customers:", error);
    });
}










class OptimizationResource(Resource):
    def post(self):
        input_json = request.get_json()
        Optimization = optimization_service.create(input_json=input_json)
        return Optimization

    def get(self, id):
        Optimization = optimization_service.get_by_id(id)
        return Optimization

    def put(self, id):
        input_json = request.get_json()
        Optimization = optimization_service.update(id, input_json)
        return Optimization

    def delete(self, id):
        return optimization_service.delete(id)

class OptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp')) if args.get('rpp') else 50
        page = int(args.get('page')) if args.get('page') else 0
        country = str(args.get('country')) if args.get('country') else None
        category = str(args.get('category')) if args.get('category') else None
        status = (str(args.get('status')).split(',')) if args.get('status') else None
        optimizations = optimization_service.get_optimizations(rpp=rpp,page=page,country=country,category=category, status=status )
        return optimizations

class DevOptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp')) if args.get('rpp') else 50
        page = int(args.get('page')) if args.get('page') else 0
        country = str(args.get('country')) if args.get('country') else None
        category = str(args.get('category')) if args.get('category') else None
        status = (str(args.get('status')).split(',')) if args.get('status') else None
        optimizations = optimization_service.get_optimizations_by_country(rpp=rpp,page=page,country=country, status=status )
        return optimizations


def create(input_json):
    session = _init_session()
    owner_email = input_json.get("owner_email", None)
    experiment_params = input_json.get("experiment_params", None)

    status = input_json.get('status', None)
    optimization_name = input_json.get('optimization_name', None)
    time_period = input_json.get('time_period', None)
    budget = input_json.get('budget', None)
    partition_count = input_json.get('partition_count', None)
    breaks = input_json.get('breaks', None)
    reach_output_format = input_json.get('reach_output_format', 'Sequential')
    objective = input_json.get('objective', None)
    experiment_params_frontend = input_json.get('experiment_params_frontend', None)
    is_tesseract = input_json.get('is_tesseract', False)
    country = input_json.get('country', None)
    category = input_json.get('category', None)

    try:
        optimization = Optimization(experiment_params=experiment_params,
                                    owner_email=owner_email,
                                    status=status,
                                    optimization_name=optimization_name,
                                    time_period=time_period,
                                    budget=budget,
                                    partition_count=partition_count,
                                    breaks=breaks,
                                    reach_output_format=reach_output_format,
                                    objective=objective,
                                    experiment_params_frontend=experiment_params_frontend,
                                    created_datetime=datetime.now().strftime(('%Y-%m-%d %H:%M:%S')),
                                    last_modified_datetime=datetime.now().strftime(('%Y-%m-%d %H:%M:%S')),
                                    is_tesseract = is_tesseract,
                                    country = country,
                                    category = category,
                                    output_file_path="gs://")
        session.add(optimization)
        session.commit()
        print('==================================OPTIMIZATION CREATED==================')
        print(optimization)
        print('==================================OPTIMIZATION SENDING==================')
        print(optimization_schema.dump(optimization))
        return optimization_schema.dump(optimization)
    except:
        raise
        session.rollback()

    finally:
        session.close()
