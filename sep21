from fastapi import FastAPI, HTTPException
from typing import List, Optional
import csv

app = FastAPI()

@app.post("/convert-csv/")
async def convert_csv(csv_content: str):
    try:
        data = []
        lines = csv_content.strip().split("\n")
        headers = lines[0].split(",")
        for line in lines[1:]:
            values = line.split(",")
            row = {headers[i]: values[i] for i in range(len(headers))}
            data.append(row)

        attributes = {}
        sample_data = {}

        special_handling_columns = [
            "channel_name", "start_day", "end_day", "start_time", "end_time",
            "include_program_type_name", "program_type_name",
            "include_program_event_name", "program_event_name",
            "include_program_name", "program_name"
        ]

        for column in headers:
            if column in special_handling_columns:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}

                if column == "start_time":
                    # Placeholder logic, replace with actual logic
                    value = "current time - 1 year below"
                elif column == "end_time":
                    # Placeholder logic, replace with actual logic
                    value = "current time"
                else:
                    value = ""

                if value.strip():  # Skip empty values
                    attributes[column]["deal_values"].append({"value": value})
            else:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}
                for item in data:
                    value = item.get(column, "")
                    if value.strip():  # Skip empty values
                        attributes[column]["deal_values"].append({"value": value})

        # Filter out attributes with no "deal_values"
        filtered_attributes = {key: value for key, value in attributes.items() if any(item["value"] for item in value["deal_values"])}

        sample_data["updated_at"] = "1970-01-01T05:30:00+00:00"
        sample_data["attributes"] = filtered_attributes

        return sample_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))




















from fastapi import FastAPI, HTTPException
from typing import List, Optional
import csv

app = FastAPI()

@app.post("/convert-csv/")
async def convert_csv(csv_content: str):
    try:
        data = []
        lines = csv_content.strip().split("\n")
        headers = lines[0].split(",")
        for line in lines[1:]:
            values = line.split(",")
            row = {headers[i]: values[i] for i in range(len(headers))}
            data.append(row)

        attributes = {}

        special_handling_columns = [
            "channel_name", "start_day", "end_day", "start_time", "end_time",
            "include_program_type_name", "program_type_name",
            "include_program_event_name", "program_event_name",
            "include_program_name", "program_name"
        ]

        for column in headers:
            if column in special_handling_columns:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}

                for item in data:
                    value = item.get(column, "").strip()
                    if value:  # Skip empty values
                        attributes[column]["deal_values"].append({"value": value})
            else:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}
                for item in data:
                    value = item.get(column, "").strip()
                    if value:  # Skip empty values
                        attributes[column]["deal_values"].append({"value": value})

        # Filter out attributes with no "deal_values"
        filtered_attributes = {key: value for key, value in attributes.items() if value["deal_values"]}

        sample_data = {
            "updated_at": "1970-01-01T05:30:00+00:00",
            "attributes": filtered_attributes
        }

        return sample_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))










{
  "updated_at": "1970-01-01T05:30:00+00:00",
  "attributes": {}
}












from fastapi import FastAPI, HTTPException
from typing import List, Optional
import csv

app = FastAPI()

@app.post("/convert-csv/")
async def convert_csv(csv_content: str):
    try:
        data = []
        lines = csv_content.strip().split("\n")
        headers = lines[0].split(",")
        for line in lines[1:]:
            values = line.split(",")
            row = {headers[i]: values[i] for i in range(len(headers))}
            data.append(row)

        attributes = {}

        special_handling_columns = [
            "channel_name", "start_day", "end_day", "start_time", "end_time",
            "include_program_type_name", "program_type_name",
            "include_program_event_name", "program_event_name",
            "include_program_name", "program_name"
        ]

        for column in headers:
            if column in special_handling_columns:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}

                for item in data:
                    value = item.get(column, "").strip()
                    if value:  # Skip empty values
                        attributes[column]["deal_values"].append({"value": value})
            else:
                values = [item.get(column, "").strip() for item in data]
                if any(values):  # Check if any value is non-empty
                    attributes[column] = {"deal_values": [{"value": value} for value in values if value]}

        sample_data = {
            "updated_at": "1970-01-01T05:30:00+00:00",
            "attributes": attributes
        }

        return sample_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))







{
  "updated_at": "1970-01-01T05:30:00+00:00",
  "attributes": {
    "channel_name": {
      "deal_values": []
    },
    "start_day": {
      "deal_values": []
    },
    "end_day": {
      "deal_values": []
    },
    "start_time": {
      "deal_values": []
    },
    "end_time": {
      "deal_values": []
    },
    "include_program_type_name": {
      "deal_values": []
    },
    "program_type_name": {
      "deal_values": []
    },
    "include_program_event_name": {
      "deal_values": []
    },
    "program_event_name": {
      "deal_values": []
    },
    "include_program_name": {
      "deal_values": []
    }
  }
}






















from fastapi import FastAPI, HTTPException
from typing import List, Optional
import csv

app = FastAPI()

@app.post("/convert-csv/")
async def convert_csv(csv_content: str):
    try:
        data = []
        lines = csv_content.strip().split("\n")
        headers = lines[0].split(",")
        for line in lines[1:]:
            values = line.split(",")
            row = {headers[i]: values[i] for i in range(len(headers))}
            data.append(row)

        attributes = {}

        special_handling_columns = [
            "channel_name", "start_day", "end_day", "start_time", "end_time",
            "include_program_type_name", "program_type_name",
            "include_program_event_name", "program_event_name",
            "include_program_name", "program_name"
        ]

        for column in headers:
            if column in special_handling_columns:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}

                for item in data:
                    value = item.get(column, "").strip()
                    if value:  # Skip empty values
                        attributes[column]["deal_values"].append({"value": value})
            else:
                values = [item.get(column, "").strip() for item in data]
                if any(values):  # Check if any value is non-empty
                    attributes[column] = {"deal_values": [{"value": value} for value in values if value]}

        # Remove empty columns from attributes
        attributes = {key: value for key, value in attributes.items() if value["deal_values"]}

        sample_data = {
            "updated_at": "1970-01-01T05:30:00+00:00",
            "attributes": attributes
        }

        return sample_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


























import csv
import io
from collections import defaultdict

# Simulate reading CSV data from the request body (replace this with your actual request data)
request_body = """
grouping_description,element_name,channel_name,start_day,end_day,start_time,end_time,include_program_type_name,program_type_name,include_program_event_name,program_event_name,include_program_name,program_name
AA,BADAMI,BDM,0,6,06:00:00,02:00:00,,,,,,
AA,BET,BET,0,6,06:00:00,02:00:00,,,,,,
AA,BET_HER,BHER,0,6,06:00:00,02:00:00,,,,,,
AA,BOUNCE,BOU,0,6,06:00:00,02:00:00,,,,,,
AA,CLEO_TV,CLEO,0,6,06:00:00,02:00:00,,,,,,
AA,COMEDY_TV,CDTV,0,6,06:00:00,03:00:00,,,,,1.0,COMEDY.TV;COMICS UNLEASHED;WORLDS FUNNIEST WEATHER
AA,COURT_COMBO,CFE,0,6,06:00:00,03:00:00,,,,,1.0,ES COURT COMBO
AA,ES_SPECIALS,CFE,0,6,06:00:00,03:00:00,,,,,1.0,WE HAVE A DREAM;FEEL THE BEAT;HAPPY HOLIDAYS AMERICA
AA,FUNNY_YOU_SHOULD_ASK,CFE,0,6,06:00:00,03:00:00,,,,,1.0,FUNNY YOU SHOULD ASK (AT)
AA,OWN,OWN,0,6,06:00:00,02:00:00,,,,,,
AA,TVONE,TV1,0,6,06:00:00,02:00:00,,,,,,
AA,WEATHER_COMBO,CFE,0,6,06:00:00,03:00:00,,,,,1.0,WEATHER COMBO
BROADCAST_NEWS,ABC_EARLY_MORNING,ABC,0,4,06:00:00,08:00:00,,,,,,
BROADCAST_NEWS,ABC_EVENING,ABC,0,6,18:30:00,19:00:00,1.0,NEWS,,,,
BROADCAST_NEWS,ABC_NIGHTLINE,ABC,0,4,00:35:00,01:35:00,,,,,,
BROADCAST_NEWS,CBS_EARLY_MORNING,CBS,0,4,06:00:00,08:00:00,,,,,,
BROADCAST_NEWS,CBS_EVENING,CBS,0,6,18:00:00,19:00:00,1.0,NEWS,,,,
BROADCAST_NEWS,CBS_SUNDAY_MORNING,CBS,6,6,09:00:00,09:30:00,,,,,,
BROADCAST_NEWS,ITN_EARLY_MORNING,ITN,0,6,06:00:00,03:00:00,,,,,1.0,ITN EARLY MORN A;ITN EARLY MORN B;ITN EARLY MORN C;ITN EARLY MORN D;ITN EARLY MORN E;ITN EARLY MORN F;ITN EARLY MORN G;ITN EARLY MORN H;ITN EARLY MORN I;ITN EARLY MORN J;ITN EARLY MORN K;ITN EARLY MORN L;ITN EARLY MORN M;ITN EARLY MORN N;ITN EARLY MORN O
BROADCAST_NEWS,ITN_EVENING,ITN,0,6,06:00:00,03:00:00,,,,,1.0,ITN EVENING NEWS A;ITN EVENING NEWS B;ITN EVENING NEWS C;ITN EVENING NEWS D;ITN EVENING NEWS E;ITN EVENING NEWS F;ITN EVENING NEWS G;ITN EVENING NEWS H;ITN EVENING NEWS I;ITN EVENING NEWS J;ITN EVENING NEWS K;ITN EVENING NEWS L
BROADCAST_NEWS,NBC_EARLY_TODAY,NBC,0,4,04:00:00,07:00:00,,,,,,
"""

# Create a defaultdict to store the attributes
attributes = defaultdict(lambda: {"deal_values": []})

# Read the CSV data from the simulated request body
csv_data = io.StringIO(request_body)
csv_reader = csv.reader(csv_data)
next(csv_reader)  # Skip the header row
for row in csv_reader:
    grouping_description, element_name, channel_name, start_day, end_day, start_time, end_time, include_program_type_name, program_type_name, include_program_event_name, program_event_name, include_program_name, program_name = row

    # Populate the attributes based on non-empty values
    if channel_name:
        attributes["channel_name"]["deal_values"].append({"value": channel_name})
    if start_day:
        attributes["start_day"]["deal_values"].append({"value": int(start_day)})
    if end_day:
        attributes["end_day"]["deal_values"].append({"value": int(end_day)})
    if start_time:
        attributes["start_time"]["deal_values"].append({"value": start_time})
    if end_time:
        attributes["end_time"]["deal_values"].append({"value": end_time})
    if include_program_type_name:
        attributes["include_program_type_name"]["deal_values"].append({"value": include_program_type_name})
    if program_type_name:
        attributes["program_type_name"]["deal_values"].append({"value": program_type_name})
    if include_program_event_name:
        attributes["include_program_event_name"]["deal_values"].append({"value": include_program_event_name})
    if program_event_name:
        attributes["program_event_name"]["deal_values"].append({"value": program_event_name})
    if include_program_name:
        attributes["include_program_name"]["deal_values"].append({"value": include_program_name})

# Convert defaultdict to a regular dictionary
attributes_dict = dict(attributes)

# Create the final JSON response
json_response = {
    "updated_at": "1970-01-01T05:30:00+00:00",
    "attributes": attributes_dict
}

# Print or return the JSON response
print(json_response)

