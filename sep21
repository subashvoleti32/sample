from fastapi import FastAPI, HTTPException
from typing import List, Optional
import csv

app = FastAPI()

@app.post("/convert-csv/")
async def convert_csv(csv_content: str):
    try:
        data = []
        lines = csv_content.strip().split("\n")
        headers = lines[0].split(",")
        for line in lines[1:]:
            values = line.split(",")
            row = {headers[i]: values[i] for i in range(len(headers))}
            data.append(row)

        attributes = {}
        sample_data = {}

        special_handling_columns = [
            "channel_name", "start_day", "end_day", "start_time", "end_time",
            "include_program_type_name", "program_type_name",
            "include_program_event_name", "program_event_name",
            "include_program_name", "program_name"
        ]

        for column in headers:
            if column in special_handling_columns:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}

                if column == "start_time":
                    # Placeholder logic, replace with actual logic
                    value = "current time - 1 year below"
                elif column == "end_time":
                    # Placeholder logic, replace with actual logic
                    value = "current time"
                else:
                    value = ""

                if value.strip():  # Skip empty values
                    attributes[column]["deal_values"].append({"value": value})
            else:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}
                for item in data:
                    value = item.get(column, "")
                    if value.strip():  # Skip empty values
                        attributes[column]["deal_values"].append({"value": value})

        # Filter out attributes with no "deal_values"
        filtered_attributes = {key: value for key, value in attributes.items() if any(item["value"] for item in value["deal_values"])}

        sample_data["updated_at"] = "1970-01-01T05:30:00+00:00"
        sample_data["attributes"] = filtered_attributes

        return sample_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))




















from fastapi import FastAPI, HTTPException
from typing import List, Optional
import csv

app = FastAPI()

@app.post("/convert-csv/")
async def convert_csv(csv_content: str):
    try:
        data = []
        lines = csv_content.strip().split("\n")
        headers = lines[0].split(",")
        for line in lines[1:]:
            values = line.split(",")
            row = {headers[i]: values[i] for i in range(len(headers))}
            data.append(row)

        attributes = {}

        special_handling_columns = [
            "channel_name", "start_day", "end_day", "start_time", "end_time",
            "include_program_type_name", "program_type_name",
            "include_program_event_name", "program_event_name",
            "include_program_name", "program_name"
        ]

        for column in headers:
            if column in special_handling_columns:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}

                for item in data:
                    value = item.get(column, "").strip()
                    if value:  # Skip empty values
                        attributes[column]["deal_values"].append({"value": value})
            else:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}
                for item in data:
                    value = item.get(column, "").strip()
                    if value:  # Skip empty values
                        attributes[column]["deal_values"].append({"value": value})

        # Filter out attributes with no "deal_values"
        filtered_attributes = {key: value for key, value in attributes.items() if value["deal_values"]}

        sample_data = {
            "updated_at": "1970-01-01T05:30:00+00:00",
            "attributes": filtered_attributes
        }

        return sample_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))










{
  "updated_at": "1970-01-01T05:30:00+00:00",
  "attributes": {}
}












from fastapi import FastAPI, HTTPException
from typing import List, Optional
import csv

app = FastAPI()

@app.post("/convert-csv/")
async def convert_csv(csv_content: str):
    try:
        data = []
        lines = csv_content.strip().split("\n")
        headers = lines[0].split(",")
        for line in lines[1:]:
            values = line.split(",")
            row = {headers[i]: values[i] for i in range(len(headers))}
            data.append(row)

        attributes = {}

        special_handling_columns = [
            "channel_name", "start_day", "end_day", "start_time", "end_time",
            "include_program_type_name", "program_type_name",
            "include_program_event_name", "program_event_name",
            "include_program_name", "program_name"
        ]

        for column in headers:
            if column in special_handling_columns:
                if column not in attributes:
                    attributes[column] = {"deal_values": []}

                for item in data:
                    value = item.get(column, "").strip()
                    if value:  # Skip empty values
                        attributes[column]["deal_values"].append({"value": value})
            else:
                values = [item.get(column, "").strip() for item in data]
                if any(values):  # Check if any value is non-empty
                    attributes[column] = {"deal_values": [{"value": value} for value in values if value]}

        sample_data = {
            "updated_at": "1970-01-01T05:30:00+00:00",
            "attributes": attributes
        }

        return sample_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))







{
  "updated_at": "1970-01-01T05:30:00+00:00",
  "attributes": {
    "channel_name": {
      "deal_values": []
    },
    "start_day": {
      "deal_values": []
    },
    "end_day": {
      "deal_values": []
    },
    "start_time": {
      "deal_values": []
    },
    "end_time": {
      "deal_values": []
    },
    "include_program_type_name": {
      "deal_values": []
    },
    "program_type_name": {
      "deal_values": []
    },
    "include_program_event_name": {
      "deal_values": []
    },
    "program_event_name": {
      "deal_values": []
    },
    "include_program_name": {
      "deal_values": []
    }
  }
}
