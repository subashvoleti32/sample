from sqlalchemy import create_engine, Column, Integer, String, Date, ForeignKey
from sqlalchemy.orm import relationship, backref
from sqlalchemy.ext.declarative import declarative_base

# Define the SQLAlchemy engine
engine = create_engine('sqlite:///pizza_ordering.db', echo=True)

# Define the declarative base
Base = declarative_base()

# Define the SQLAlchemy models with relationships
class Pizza(Base):
    __tablename__ = 'pizzas'
    pizza_id = Column(Integer, primary_key=True)
    pizza_name = Column(String)
    pizza_type = Column(String)
    pizza_description = Column(String)
    orders = relationship("Order", back_populates="pizza")

class Order(Base):
    __tablename__ = 'orders'
    order_id = Column(Integer, primary_key=True)
    order_customer_id = Column(Integer, ForeignKey('customers.customer_id'))
    order_type = Column(String)
    order_number = Column(String)
    order_description = Column(String)
    customer = relationship("Customer", back_populates="orders")
    pizza_id = Column(Integer, ForeignKey('pizzas.pizza_id'))
    pizza = relationship("Pizza", back_populates="orders")
    statuses = relationship("OrderStatus", back_populates="order")

class Customer(Base):
    __tablename__ = 'customers'
    customer_id = Column(Integer, primary_key=True)
    customer_name = Column(String)
    customer_mobile = Column(String)
    customer_email = Column(String)
    customer_username = Column(String)
    customer_password = Column(String)
    customer_address = Column(String)
    orders = relationship("Order", back_populates="customer")
    payments = relationship("Payment", back_populates="customer")

class OrderStatus(Base):
    __tablename__ = 'order_statuses'
    status_id = Column(Integer, primary_key=True)
    status_order_id = Column(Integer, ForeignKey('orders.order_id'))
    status_name = Column(String)
    status_update = Column(String)
    status_time = Column(String)
    status_date = Column(Date)
    status_type = Column(String)
    status_description = Column(String)
    order = relationship("Order", back_populates="statuses")

class Coupon(Base):
    __tablename__ = 'coupons'
    coupon_id = Column(Integer, primary_key=True)
    coupon_pizza_id = Column(Integer, ForeignKey('pizzas.pizza_id'))
    coupon_name = Column(String)
    coupon_type = Column(String)
    coupon_description = Column(String)

class Payment(Base):
    __tablename__ = 'payments'
    payment_id = Column(Integer, primary_key=True)
    payment_customer_id = Column(Integer, ForeignKey('customers.customer_id'))
    payment_date = Column(Date)
    payment_amount = Column(Integer)
    payment_description = Column(String)
    customer = relationship("Customer", back_populates="payments")

# Create the tables in the database
Base.metadata.create_all(engine)




# CRUD operations for Pizza
@app.post("/pizzas/", response_model=Pizza)
def create_pizza(pizza: Pizza, db: Session = Depends(get_db)):
    db.add(pizza)
    db.commit()
    db.refresh(pizza)
    return pizza

@app.get("/pizzas/", response_model=List[Pizza])
def read_pizzas(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    return db.query(Pizza).offset(skip).limit(limit).all()

@app.get("/pizzas/{pizza_id}", response_model=Pizza)
def read_pizza(pizza_id: int, db: Session = Depends(get_db)):
    return db.query(Pizza).filter(Pizza.pizza_id == pizza_id).first()

@app.put("/pizzas/{pizza_id}", response_model=Pizza)
def update_pizza(pizza_id: int, pizza: Pizza, db: Session = Depends(get_db)):
    db_pizza = db.query(Pizza).filter(Pizza.pizza_id == pizza_id).first()
    for var, value in vars(pizza).items():
        setattr(db_pizza, var, value)
    db.commit()
    db.refresh(db_pizza)
    return db_pizza

@app.delete("/pizzas/{pizza_id}")
def delete_pizza(pizza_id: int, db: Session = Depends(get_db)):
    db.query(Pizza).filter(Pizza.pizza_id == pizza_id).delete(synchronize_session=False)
    db.commit()
    return {"message": "Pizza deleted successfully"}


# CRUD operations for Order
@app.post("/orders/", response_model=Order)
def create_order(order: Order, db: Session = Depends(get_db)):
    db.add(order)
    db.commit()
    db.refresh(order)
    return order

@app.get("/orders/", response_model=List[Order])
def read_orders(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    return db.query(Order).offset(skip).limit(limit).all()

@app.get("/orders/{order_id}", response_model=Order)
def read_order(order_id: int, db: Session = Depends(get_db)):
    return db.query(Order).filter(Order.order_id == order_id).first()

@app.put("/orders/{order_id}", response_model=Order)
def update_order(order_id: int, order: Order, db: Session = Depends(get_db)):
    db_order = db.query(Order).filter(Order.order_id == order_id).first()
    for var, value in vars(order).items():
        setattr(db_order, var, value)
    db.commit()
    db.refresh(db_order)
    return db_order

@app.delete("/orders/{order_id}")
def delete_order(order_id: int, db: Session = Depends(get_db)):
    db.query(Order).filter(Order.order_id == order_id).delete(synchronize_session=False)
    db.commit()
    return {"message": "Order deleted successfully"}


# CRUD operations for Customer
@app.post("/customers/", response_model=Customer)
def create_customer(customer: Customer, db: Session = Depends(get_db)):
    db.add(customer)
    db.commit()
    db.refresh(customer)
    return customer

@app.get("/customers/", response_model=List[Customer])
def read_customers(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    return db.query(Customer).offset(skip).limit(limit).all()

@app.get("/customers/{customer_id}", response_model=Customer)
def read_customer(customer_id: int, db: Session = Depends(get_db)):
    return db.query(Customer).filter(Customer.customer_id == customer_id).first()

@app.put("/customers/{customer_id}", response_model=Customer)
def update_customer(customer_id: int, customer: Customer, db: Session = Depends(get_db)):
    db_customer = db.query(Customer).filter(Customer.customer_id == customer_id).first()
    for var, value in vars(customer).items():
        setattr(db_customer, var, value)
    db.commit()
    db.refresh(db_customer)
    return db_customer

@app.delete("/customers/{customer_id}")
def delete_customer(customer_id: int, db: Session = Depends(get_db)):
    db.query(Customer).filter(Customer.customer_id == customer_id).delete(synchronize_session=False)
    db.commit()
    return {"message": "Customer deleted successfully"}


# CRUD operations for OrderStatus
@app.post("/order_statuses/", response_model=OrderStatus)
def create_order_status(order_status: OrderStatus, db: Session = Depends(get_db)):
    db.add(order_status)
    db.commit()
    db.refresh(order_status)
    return order_status

@app.get("/order_statuses/", response_model=List[OrderStatus])
def read_order_statuses(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    return db.query(OrderStatus).offset(skip).limit(limit).all()

@app.get("/order_statuses/{status_id}", response_model=OrderStatus)
def read_order_status(status_id: int, db: Session = Depends(get_db)):
    return db.query(OrderStatus).filter(OrderStatus.status_id == status_id).first()

@app.put("/order_statuses/{status_id}", response_model=OrderStatus)
def update_order_status(status_id: int, order_status: OrderStatus, db: Session = Depends(get_db)):
    db_order_status = db.query(OrderStatus).filter(OrderStatus.status_id == status_id).first()
    for var, value in vars(order_status).items():
        setattr(db_order_status, var, value)
    db.commit()
    db.refresh(db_order_status)
    return db_order_status

@app.delete("/order_statuses/{status_id}")
def delete_order_status(status_id: int, db: Session = Depends(get_db)):
    db.query(OrderStatus).filter(OrderStatus.status_id == status_id).delete(synchronize_session=False)
    db.commit()
    return {"message": "Order status deleted successfully"}


# CRUD operations for Coupon
@app.post("/coupons/", response_model=Coupon)
def create_coupon(coupon: Coupon, db: Session = Depends(get_db)):
    db.add(coupon)
    db.commit()
    db.refresh(coupon)
    return coupon

@app.get("/coupons/", response_model=List[Coupon])
def read_coupons(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    return db.query(Coupon).offset(skip).limit(limit).all()

@app.get("/coupons/{coupon_id}", response_model=Coupon)
def read_coupon(coupon_id: int, db: Session = Depends(get_db)):
    return db.query(Coupon).filter(Coupon.coupon_id == coupon_id).first()

@app.put("/coupons/{coupon_id}", response_model=Coupon)
def update_coupon(coupon_id: int, coupon: Coupon, db: Session = Depends(get_db)):
    db_coupon = db.query(Coupon).filter(Coupon.coupon_id == coupon_id).first()
    for var, value in vars(coupon).items():
        setattr(db_coupon, var, value)
    db.commit()
    db.refresh(db_coupon)
    return db_coupon

@app.delete("/coupons/{coupon_id}")
def delete_coupon(coupon_id: int, db: Session = Depends(get_db)):
    db.query(Coupon).filter(Coupon.coupon_id == coupon_id).delete(synchronize_session=False)
    db.commit()
    return {"message": "Coupon deleted successfully"}


# CRUD operations for Payment
@app.post("/payments/", response_model=Payment)
def create_payment(payment: Payment, db: Session = Depends(get_db)):
    db.add(payment)
    db.commit()
    db.refresh(payment)
    return payment

@app.get("/payments/", response_model=List[Payment])
def read_payments(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    return db.query(Payment).offset(skip).limit(limit).all()

@app.get("/payments/{payment_id}", response_model=Payment)
def read_payment(payment_id: int, db: Session = Depends(get_db)):
    return db.query(Payment).filter(Payment.payment_id == payment_id).first()

@app.put("/payments/{payment_id}", response_model=Payment)
def update_payment(payment_id: int, payment: Payment, db: Session = Depends(get_db)):
    db_payment = db.query(Payment).filter(Payment.payment_id == payment_id).first()
    for var, value in vars(payment).items():
        setattr(db_payment, var, value)
    db.commit()
    db.refresh(db_payment)
    return db_payment

@app.delete("/payments/{payment_id}")
def delete_payment(payment_id: int, db: Session = Depends(get_db)):
    db.query(Payment).filter(Payment.payment_id == payment_id).delete(synchronize_session=False)
    db.commit()
    return {"message": "Payment deleted successfully"}

def download_template_as_xlsx(blob):
    try:
        blob_content = blob.download_as_bytes()
        df = pd.read_csv(BytesIO(blob_content))
        df.drop(df.columns[df.columns.str.contains('unnamed', case=False)], 
                axis=1, inplace=True)
        # download template
        with tempfile.NamedTemporaryFile(suffix=".xlsx") as temp:
            df.to_excel(temp, index=False)
            return send_file(
                temp.name, 
                as_attachment=True,  
                mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    except Exception as e:
        return {
            "message": f"Could not able to download the file, error: {str(e)}"
        },http.HTTPStatus.FORBIDDEN
    
    

def download_template(country, template):
    # check if correct country was provided
    if country not in generate_fn: 
        return {
            'message': f"Country {country} not supported."
        }, http.HTTPStatus.NOT_FOUND
    try:
        storage_client = storage.Client()
        bucket_name = BUCKET_NAME # param from config
        blob_name = 'ESM_STG/' + country + '/' + template + '.csv' 
        
        bucket = storage_client.get_bucket(bucket_name)
        blob = bucket.get_blob(blob_name)
        if not blob: return

        return download_template_as_xlsx(blob)
    except Exception as e:
        return {
            "message": f"Could not able to download the file, error: {str(e)}"
        }, http.HTTPStatus.FORBIDDEN
