from sqlalchemy import create_engine, Column, Integer, String, Date, ForeignKey
from sqlalchemy.orm import relationship, backref
from sqlalchemy.ext.declarative import declarative_base

# Define the SQLAlchemy engine
engine = create_engine('sqlite:///pizza_ordering.db', echo=True)

# Define the declarative base
Base = declarative_base()

# Define the SQLAlchemy models with relationships
class Pizza(Base):
    __tablename__ = 'pizzas'
    pizza_id = Column(Integer, primary_key=True)
    pizza_name = Column(String)
    pizza_type = Column(String)
    pizza_description = Column(String)
    orders = relationship("Order", back_populates="pizza")

class Order(Base):
    __tablename__ = 'orders'
    order_id = Column(Integer, primary_key=True)
    order_customer_id = Column(Integer, ForeignKey('customers.customer_id'))
    order_type = Column(String)
    order_number = Column(String)
    order_description = Column(String)
    customer = relationship("Customer", back_populates="orders")
    pizza_id = Column(Integer, ForeignKey('pizzas.pizza_id'))
    pizza = relationship("Pizza", back_populates="orders")
    statuses = relationship("OrderStatus", back_populates="order")

class Customer(Base):
    __tablename__ = 'customers'
    customer_id = Column(Integer, primary_key=True)
    customer_name = Column(String)
    customer_mobile = Column(String)
    customer_email = Column(String)
    customer_username = Column(String)
    customer_password = Column(String)
    customer_address = Column(String)
    orders = relationship("Order", back_populates="customer")
    payments = relationship("Payment", back_populates="customer")

class OrderStatus(Base):
    __tablename__ = 'order_statuses'
    status_id = Column(Integer, primary_key=True)
    status_order_id = Column(Integer, ForeignKey('orders.order_id'))
    status_name = Column(String)
    status_update = Column(String)
    status_time = Column(String)
    status_date = Column(Date)
    status_type = Column(String)
    status_description = Column(String)
    order = relationship("Order", back_populates="statuses")

class Coupon(Base):
    __tablename__ = 'coupons'
    coupon_id = Column(Integer, primary_key=True)
    coupon_pizza_id = Column(Integer, ForeignKey('pizzas.pizza_id'))
    coupon_name = Column(String)
    coupon_type = Column(String)
    coupon_description = Column(String)

class Payment(Base):
    __tablename__ = 'payments'
    payment_id = Column(Integer, primary_key=True)
    payment_customer_id = Column(Integer, ForeignKey('customers.customer_id'))
    payment_date = Column(Date)
    payment_amount = Column(Integer)
    payment_description = Column(String)
    customer = relationship("Customer", back_populates="payments")

# Create the tables in the database
Base.metadata.create_all(engine)
