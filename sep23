{'bq_engine': <sqlalchemy.orm.session.Session object at 0x000001F189413150>, 'country': 'us', 'record_date': '2023-09-22'}
<class 'api.src.util.member_attribute_query.GetMemberAttributeDimBq'>
TypeError: 'GetMemberAttributeDimBq' object is not iterable


@attributes_router.post("/data_sync", status_code=200)
def export_member_attribute_dim_to_spanner(request:ExportMemberAttributeDimModel, db: Session = Depends(get_db), bq_db: Session = Depends(get_bq_db)):

    bq_data = GetMemberAttributeDimBq(bq_engine=bq_db, country=request.country_code, record_date=request.record_date)
    print(bq_data.__dict__)
    print(type(bq_data))
    for row in bq_data:
        model_obj = Attribute()
        data = row._asdict()
        model_obj.name = data['member_attribute_name']
        model_obj.name_label = model_obj.name.replace('_', " ")
        member_attr_val = data['member_attr_val']
        values_json = {}
        for value in member_attr_val.split(','):
            if value :
                values_json[value] = {"label": "", "description":""}
        model_obj.values = values_json
        db.add(model_obj)
        db.commit()
        db.refresh(model_obj)

    return {"message": "All data is exported from Big Query to Cloud Spanner till {}".format(request.record_date)}


    from datetime import date, datetime
from sqlalchemy.sql import text
from ..config.env_var import settings

def get_today() -> str:
    return datetime.now()

class GetMemberAttributeDimBq(object):
    _member_attribute_tbl: str = "member_attribute_dim"
    bq_lake: str = settings.bq_lake

    def __init__(
        self,
        bq_engine,
        country,
        record_date: str = None,  # type: ignore
    ):
        self.bq_engine = bq_engine
        self.country = country.lower()
        self.record_date = get_today()
        if record_date and datetime.strptime(str(record_date), "%Y-%m-%d" ) < get_today():
            self.record_date = datetime.strptime(str(record_date), "%Y-%m-%d" )
        self.record_date = self.record_date.strftime("%Y-%m-%d")
        

    @property
    def get_member_attribute_dim_bq_table(self):
        return f"{self.bq_lake}.f_ltvo_{self.country}.{self._member_attribute_tbl}"

    @property
    def base_query(self):
        excluded_fields = {
            "us" : ' AND member_attribute_name NOT IN ("monthly_unified_weight","hh_quarterly_unified_weight","quarterly_unified_weight","hh_monthly_unified_weight","hh_weight_qty","age_gender_building_block_code","hh_weekly_unified_weight","weekly_unified_weight")',
            "it" : ' AND member_attribute_name NOT IN ("weight")',
            "fr" : ' AND member_attribute_name NOT IN ("household_id")'
        }
        query = [
            "SELECT member_attribute_name, STRING_AGG(DISTINCT member_attribute_val) as member_attr_val FROM",
            f"`{self.get_member_attribute_dim_bq_table}`",
            f'WHERE record_date < "{self.record_date}"',
        ]
        
        if self.country in excluded_fields:
            query.append(excluded_fields.get(self.country))

        query.append(f' GROUP BY member_attribute_name')
        
        return " ".join(query)
    
    def get_results(self):

        results = self.bq_engine.execute(
            text(self.base_query)
        ).fetchall()

        return results if results else []
    
    def paginate_big_query_data(bq_client, page_num, data_per_page):
        offset = (page_num - 1) * data_per_page
        query = [
                "SELECT member_attribute_name, STRING_AGG(DISTINCT member_attribute_val) as member_attr_val FROM",
                f"`{self.member_attribute_table}`",
                f'WHERE record_date < "{self.record_date}"',
                f' GROUP BY member_attribute_name',
                f'LIMIT {data_per_page}',
                f'OFFSET {offset}'
                ]
        data_obj = bq_client.execute(' '.join(query))


        return data_obj.fetchall()



class ExportMemberAttributeDimModel(BaseModel):
    country_code: str = Field(..., title="Country Code")
    record_date: Optional[date] = Field(..., title="Date till which Record to be Fetched")




grpc._channel._MultiThreadedRendezvous: <_MultiThreadedRendezvous of RPC that terminated with:
        status = StatusCode.FAILED_PRECONDITION
        details = "Cannot specify a null value for column: attribute.country_code in table: attribute"
        debug_error_string = "UNKNOWN:Error received from peer  {created_time:"2023-09-22T09:18:48.423779824+00:00", grpc_status:9, grpc_message:"Cannot specify a null value for column: attribute.country_code in table: attribute"}"



File "C:\Users\10722751\AppData\Local\Programs\Python\Python311\Lib\site-packages\google\cloud\spanner_dbapi\cursor.py", line 288, in execute
    raise IntegrityError(getattr(e, "details", e)) from e
sqlalchemy.exc.IntegrityError: (google.cloud.spanner_dbapi.exceptions.IntegrityError) []
[SQL: INSERT INTO attribute (name, name_label, values, description, created_at, updated_at) VALUES (%s, %s, %s, %s, %s, %s)]
[parameters: ['education_ranges', 'education ranges', {'3': {'label': '', 'description': ''}, '5': {'label': '', 'description': ''}, '1': {'label': '', 'description': ''}, '4': {'label': '', 'description': ''}, '2': {'label': '', 'description': ''}}, None, datetime.datetime(2023, 9, 22, 14, 55, 54, 744523), datetime.datetime(1970, 1, 1, 5, 30)]]



from datetime import datetime
from typing import List

from sqlalchemy import JSON, Column, DateTime, String

from .base import Base


class Attribute(Base):
    __tablename__ = "attribute"

    country = Column("country_code", String(2), primary_key=True, nullable=False)
    # from the member_attribute_dim
    # attribute_name
    name = Column("name", String(400), primary_key=True, nullable=False)
    name_label = Column("name_label", String(400))
    # attribute_values
    values = Column("values", JSON) 
    description = Column("description", String(250))

    created_at = Column("created_at", DateTime, default=datetime.now(), nullable=False)
    # Because Cloud Spanner emulator does not infer null of Datatime, needs to set dummy value even if just creation
    updated_at = Column(
        "updated_at",
        DateTime,
        default=datetime.fromtimestamp(0),
        onupdate=datetime.now(),
        nullable=False,
    )

    @property
    def values_list(self) -> List[dict]:
        return [
            {"value": key, "label": item["label"]} for key, item in self.values.items()
        ]
