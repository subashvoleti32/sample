from flask import Flask, request, jsonify
from flask_restful import Resource, Api
from datetime import datetime

app = Flask(__name)
api = Api(app)

# Mocked data for demonstration purposes
mock_optimizations = [
    {
        "id": 1,
        "owner_email": "user1@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 1",
        "country": "USA",
        "category": "Marketing",
    },
    {
        "id": 2,
        "owner_email": "user2@example.com",
        "status": "Completed",
        "optimization_name": "Mock Optimization 2",
        "country": "Canada",
        "category": "Sales",
    },
]

class OptimizationResource(Resource):
    def post(self):
        input_json = request.get_json()
        # Mocked creation of an optimization
        mock_optimization = {
            "id": len(mock_optimizations) + 1,
            "created_datetime": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            **input_json,
        }
        mock_optimizations.append(mock_optimization)
        return jsonify(mock_optimization)

    def get(self, id):
        # Mocked retrieval of an optimization by ID
        optimization = next((opt for opt in mock_optimizations if opt["id"] == id), None)
        if optimization:
            return jsonify(optimization)
        else:
            return "Optimization not found", 404

    def put(self, id):
        input_json = request.get_json()
        optimization = next((opt for opt in mock_optimizations if opt["id"] == id), None)
        if optimization:
            optimization.update(input_json)
            return jsonify(optimization)
        else:
            return "Optimization not found", 404

    def delete(self, id):
        optimization = next((opt for opt in mock_optimizations if opt["id"] == id), None)
        if optimization:
            mock_optimizations.remove(optimization)
            return "Optimization deleted", 200
        else:
            return "Optimization not found", 404

class OptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp', 50))
        page = int(args.get('page', 0))
        country = args.get('country', None)
        category = args.get('category', None)
        status = args.get('status', '').split(',')

        filtered_optimizations = mock_optimizations
        if country:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["country"] == country]
        if category:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["category"] == category]
        if status:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["status"] in status]

        paginated_optimizations = filtered_optimizations[page * rpp : (page + 1) * rpp]
        return jsonify(paginated_optimizations)

# Define the URL routes for the resources
api.add_resource(OptimizationResource, '/optimization/<int:id>')
api.add_resource(OptimizationsResource, '/optimizations')

if __name__ == '__main__':
    app.run(debug=True)



curl -X POST -H "Content-Type: application/json" -d '{"owner_email": "user3@example.com", "status": "Pending", "optimization_name": "Mock Optimization 3", "country": "UK", "category": "Research"}' http://127.0.0.1:5000/optimization

curl -X PUT -H "Content-Type: application/json" -d '{"status": "Completed"}' http://127.0.0.1:5000/optimization/1

curl -X PUT -H "Content-Type: application/json" -d '{"status": "Completed"}' http://127.0.0.1:5000/optimization/1

curl -X DELETE http://127.0.0.1:5000/optimization/1

curl http://127.0.0.1:5000/optimizations

curl "http://127.0.0.1:5000/optimizations?country=USA&category=Marketing"

curl "http://127.0.0.1:5000/optimizations?rpp=10&page=2"

class Optimization(Base):
    __tablename__ = 'optimizations'
    id = Column(Integer, primary_key=True)
    experiment_params = Column(MutableDict.as_mutable(JSON))
    owner_email = Column(String(50))
    status = Column(String(50))
    optimization_name = Column(String(100))
    time_period = Column(String(50))
    budget = Column(DECIMAL(50, 2))
    partition_count = Column(DECIMAL(50, 2))
    breaks = Column(String(100))
    reach_output_format = Column(String(100))
    objective = Column(String(100))
    created_datetime = Column(DateTime)
    last_modified_datetime = Column(DateTime)
    output_file_path = Column(String(300))
    experiment_params_frontend = Column(MutableDict.as_mutable(JSON))
    log_file_path = Column(String(300))
    is_tesseract = Column(Boolean)
    country = Column(String(30))
    category = Column(String(30))
    scenario_id = Column(String(100))

class OptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp')) if args.get('rpp') else 50
        page = int(args.get('page')) if args.get('page') else 0
        country = str(args.get('country')) if args.get('country') else None
        category = str(args.get('category')) if args.get('category') else None
        status = (str(args.get('status')).split(',')) if args.get('status') else None
        optimizations = optimization_service.get_optimizations(rpp=rpp,page=page,country=country,category=category, status=status )
        return optimizations

def get_optimizations(rpp, page, country, category, status):
    session = _init_session()
    try:
        q = session.query(Optimization).filter_by(country=country).filter_by(category=category).filter(
            Optimization.status.in_(status)).order_by(desc('created_datetime')).offset(rpp * page).limit(rpp)
        for optimization in q:
            optimization.experiment_params = {}
        row_count = session.query(Optimization).filter_by(country=country).filter_by(category=category).filter(
            Optimization.status.in_(status)).count()
        response_json = json.dumps({'data': optimizations_schema.dump(q), 'row_count': row_count})
        session.commit()
        return json.loads(response_json)

    except Exception as e:
        session.rollback()

    finally:
        session.close()

class OptimizationResource(Resource):
    def post(self):
        input_json = request.get_json()
        Optimization = optimization_service.create(input_json=input_json)
        return Optimization

    def get(self, id):
        Optimization = optimization_service.get_by_id(id)
        return Optimization

    def put(self, id):
        input_json = request.get_json()
        Optimization = optimization_service.update(id, input_json)
        return Optimization

    def delete(self, id):
        return optimization_service.delete(id)


def create(input_json):
    session = _init_session()
    owner_email = input_json.get("owner_email", None)
    experiment_params = input_json.get("experiment_params", None)

    status = input_json.get('status', None)
    optimization_name = input_json.get('optimization_name', None)
    time_period = input_json.get('time_period', None)
    budget = input_json.get('budget', None)
    partition_count = input_json.get('partition_count', None)
    breaks = input_json.get('breaks', None)
    reach_output_format = input_json.get('reach_output_format', 'Sequential')
    objective = input_json.get('objective', None)
    experiment_params_frontend = input_json.get('experiment_params_frontend', None)
    is_tesseract = input_json.get('is_tesseract', False)
    country = input_json.get('country', None)
    category = input_json.get('category', None)

    try:
        optimization = Optimization(experiment_params=experiment_params,
                                    owner_email=owner_email,
                                    status=status,
                                    optimization_name=optimization_name,
                                    time_period=time_period,
                                    budget=budget,
                                    partition_count=partition_count,
                                    breaks=breaks,
                                    reach_output_format=reach_output_format,
                                    objective=objective,
                                    experiment_params_frontend=experiment_params_frontend,
                                    created_datetime=datetime.now().strftime(('%Y-%m-%d %H:%M:%S')),
                                    last_modified_datetime=datetime.now().strftime(('%Y-%m-%d %H:%M:%S')),
                                    is_tesseract = is_tesseract,
                                    country = country,
                                    category = category,
                                    output_file_path="gs://")
        session.add(optimization)
        session.commit()
        print('==================================OPTIMIZATION CREATED==================')
        print(optimization)
        print('==================================OPTIMIZATION SENDING==================')
        print(optimization_schema.dump(optimization))
        return optimization_schema.dump(optimization)
    except:
        raise
        session.rollback()

    finally:
        session.close()




from flask import Flask, request, jsonify
from flask_restful import Resource, Api

app = Flask(__name)
api = Api(app)

# Mocked data for demonstration purposes
mock_optimizations = [
    {
        "id": 1,
        "owner_email": "user1@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 1",
        "country": "USA",
        "category": "Marketing",
    },
    {
        "id": 2,
        "owner_email": "user2@example.com",
        "status": "Completed",
        "optimization_name": "Mock Optimization 2",
        "country": "Canada",
        "category": "Sales",
    },
]

# API routes
class OptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp', 50))
        page = int(args.get('page', 0))
        country = args.get('country', None)
        category = args.get('category', None)
        status = args.get('status', '').split(',')

        filtered_optimizations = mock_optimizations

        if country:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["country"] == country]
        if category:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["category"] == category]
        if status:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["status"] in status]

        paginated_optimizations = filtered_optimizations[page * rpp: (page + 1) * rpp]
        row_count = len(filtered_optimizations)

        response_data = {'data': paginated_optimizations, 'row_count': row_count}
        return jsonify(response_data)









from flask import Flask, request, jsonify
from flask_restful import Resource, Api

app = Flask(__name)
api = Api(app)

# Mocked data for demonstration purposes
mock_optimizations = [
    {
        "id": 1,
        "owner_email": "user1@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 1",
        "country": "USA",
        "category": "Marketing",
    },
    {
        "id": 2,
        "owner_email": "user2@example.com",
        "status": "Completed",
        "optimization_name": "Mock Optimization 2",
        "country": "Canada",
        "category": "Sales",
    },
]

# API routes
class OptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp', 50))
        page = int(args.get('page', 0))
        country = args.get('country', None)
        category = args.get('category', None)
        status = args.get('status', '').split(',')

        filtered_optimizations = mock_optimizations

        if country:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["country"] == country]
        if category:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["category"] == category]
        if status:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["status"] in status]

        paginated_optimizations = filtered_optimizations[page * rpp: (page + 1) * rpp]
        row_count = len(filtered_optimizations)

        response_data = {'data': paginated_optimizations, 'row_count': row_count}
        return jsonify(response_data)

api.add_resource(OptimizationsResource, '/api/v2/optimization/list')

if __name__ == '__main__':
    app.run(debug=True)


api.add_resource(OptimizationsResource, '/api/v2/optimization/list')

if __name__ == '__main__':
    app.run(debug=True)
















from flask import Flask, request, jsonify
from flask_restful import Resource, Api

app = Flask(__name)
api = Api(app)

# Sample data for demonstration purposes
mock_optimizations = [
    {
        "id": 1,
        "owner_email": "user1@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 1",
        "country": "USA",
        "category": "Marketing",
    },
    {
        "id": 2,
        "owner_email": "user2@example.com",
        "status": "Completed",
        "optimization_name": "Mock Optimization 2",
        "country": "Canada",
        "category": "Sales",
    },
    {
        "id": 3,
        "owner_email": "user3@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 3",
        "country": "UK",
        "category": "Research",
    },
    {
        "id": 4,
        "owner_email": "user4@example.com",
        "status": "Completed",
        "optimization_name": "Mock Optimization 4",
        "country": "Germany",
        "category": "Marketing",
    },
    {
        "id": 5,
        "owner_email": "user5@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 5",
        "country": "Australia",
        "category": "Sales",
    },
]

# API routes
class OptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp', 50))
        page = int(args.get('page', 0))
        country = args.get('country', None)
        category = args.get('category', None)
        status = args.get('status', '').split(',')

        filtered_optimizations = mock_optimizations

        if country:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["country"] == country]
        if category:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["category"] == category]
        if status:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["status"] in status]

        paginated_optimizations = filtered_optimizations[page * rpp: (page + 1) * rpp]
        row_count = len(filtered_optimizations)

        response_data = {'data': paginated_optimizations, 'row_count': row_count}
        return jsonify(response_data)

api.add_resource(OptimizationsResource, '/api/v2/optimization/list')

if __name__ == '__main__':
    app.run(debug=True)


























from flask import Flask, request, jsonify
from flask_restful import Resource, Api

app = Flask(__name)
api = Api(app)

# Sample data for demonstration purposes
mock_optimizations = [
    {
        "id": 1,
        "owner_email": "user1@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 1",
        "country": "USA",
        "category": "Marketing",
    },
    {
        "id": 2,
        "owner_email": "user2@example.com",
        "status": "Completed",
        "optimization_name": "Mock Optimization 2",
        "country": "Canada",
        "category": "Sales",
    },
    {
        "id": 3,
        "owner_email": "user3@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 3",
        "country": "UK",
        "category": "Research",
    },
    {
        "id": 4,
        "owner_email": "user4@example.com",
        "status": "Completed",
        "optimization_name": "Mock Optimization 4",
        "country": "Germany",
        "category": "Marketing",
    },
    {
        "id": 5,
        "owner_email": "user5@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 5",
        "country": "Australia",
        "category": "Sales",
    },
]

# Case-insensitive string comparison function
def case_insensitive_equals(s1, s2):
    return s1.lower() == s2.lower()

# API routes
class OptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp', 50))
        page = int(args.get('page', 0))
        country = args.get('country', None)
        category = args.get('category', None)
        status = args.get('status', '').split(',')

        filtered_optimizations = mock_optimizations

        if country:
            filtered_optimizations = [opt for opt in filtered_optimizations if case_insensitive_equals(opt["country"], country)]
        if category:
            filtered_optimizations = [opt for opt in filtered_optimizations if case_insensitive_equals(opt["category"], category)]
        if status:
            filtered_optimizations = [opt for opt in filtered_optimizations if opt["status"].lower() in [s.lower() for s in status]]

        paginated_optimizations = filtered_optimizations[page * rpp: (page + 1) * rpp]
        row_count = len(filtered_optimizations)

        response_data = {'data': paginated_optimizations, 'row_count': row_count}
        return jsonify(response_data)

api.add_resource(OptimizationsResource, '/api/v2/optimization/list')

if __name__ == '__main__':
    app.run(debug=True)

--------------------------------------------------------------------------------
class ProductMappingResource(Resource):
    def get(self):
        args = request.args
        country = str(args.get('country')) if args.get('country') else None
        category = str(args.get('category')) if args.get('category') else None
        product_mapping = product_mapping_service.get_product_mapping(country=country,category=category)
        return product_mapping

@enable_country_category_check
def get_product_mapping(country, category):
    session = _init_session()
    try:
        category = get_category(category)
        product_names = session.query(TemplateRelationMaster.product_name).filter_by(country=country, category=category).distinct().all()
        session.close()
        dto = {'products_list': [{'product': product[0]} for product in product_names]}
        return jsonify(dto)

    except Exception as e:
        session.rollback()

    finally:
        session.close()
class TemplateRelationMaster(Base):
    __tablename__ = 'template_relation'
    id = Column(Integer, primary_key=True)
    element_name_id = Column(Integer)
    category = Column(String(100))
    element_name_detail_id = Column(ARRAY(Integer))
    created_datetime = Column(DateTime)
    last_modified_datetime = Column(DateTime)
    product_name = Column(String(50))
    country = Column(String(30))
    template = Column(String(100))


class TemplateRelationMasterSchema(Schema):
    class Meta:
        fields = ("id", "element_name_id", "element_name_detail_id", "category", "product_name", "country", "template")
        model = TemplateRelationMaster


template_mapping_schema = TemplateRelationMasterSchema()
template_mappings_schema = TemplateRelationMasterSchema(many=True)


api.add_resource(ProductMappingResource, '/api/v2/product_mapping/list')












from flask import Flask, request, jsonify
from flask_restful import Resource, Api
from marshmallow import Schema, fields

app = Flask(__name)
api = Api(app)

# Mocked product mapping data for demonstration purposes
mock_product_mapping = [
    {
        "product_name": "Product A",
        "country": "USA",
        "category": "Electronics",
    },
    {
        "product_name": "Product B",
        "country": "USA",
        "category": "Electronics",
    },
    {
        "product_name": "Product X",
        "country": "Canada",
        "category": "Clothing",
    },
    {
        "product_name": "Product Y",
        "country": "Canada",
        "category": "Clothing",
    },
]

class ProductMappingResource(Resource):
    def get(self):
        args = request.args
        country = args.get('country', None)
        category = args.get('category', None)
        product_mapping = get_product_mapping(country, category)
        return product_mapping

# Function to get product mapping data (mocked)
def get_product_mapping(country, category):
    filtered_mapping = mock_product_mapping

    if country:
        filtered_mapping = [item for item in filtered_mapping if item["country"] == country]

    if category:
        filtered_mapping = [item for item in filtered_mapping if item["category"] == category]

    product_names = [item["product_name"] for item in filtered_mapping]
    
    response_data = {'products_list': [{'product': product_name} for product_name in product_names]}
    return jsonify(response_data)

api.add_resource(ProductMappingResource, '/api/v2/product_mapping/list')

if __name__ == '__main__':
    app.run(debug=True)
-------------------------------------------------------------------------------------------------------------------------
class DemographicMaster(Base):
    __tablename__ = 'demographic_master'
    id = Column(Integer, primary_key=True)
    demographic_name = Column(String(50))
    gender = Column(String(50))
    minimum_age = Column(Integer)
    maximum_age = Column(Integer)
    origin = Column(String(50))
    race = Column(String(50))
    households = Column(Boolean)
    created_by = Column(String(50))
    created_datetime = Column(DateTime)
    is_active = Column(Boolean)
    region_code = Column(String(50))
    country = Column(String(30))

    # Column(String(30))

    # def as_dict(self):
    #     return {c.name: getattr(self, c.name) for c in self.__table__.columns}


class DemographicMasterSchema(Schema):
    class Meta:
        fields = ("id", "demographic_name", "gender", "minimum_age", "maximum_age", "origin",
                  "race", "households", "created_by", "created_datetime", "is_active", 
                  "country", "region_code")
        model = DemographicMaster

demographic_schema = DemographicMasterSchema()
demographics_schema = DemographicMasterSchema(many=True)


def get_demographics_by_country(country, rpp, page):
    if country is None:
        return http.HTTPStatus.BAD_REQUEST

    session = _init_session()

    try:
        q = session.query(DemographicMaster).filter_by(country=country).order_by(desc('created_datetime')).offset(rpp * page).limit(rpp)
        row_count = session.query(DemographicMaster).filter_by(country=country).count()
        response_json = json.dumps({'data': demographics_schema.dump(q), 'row_count': row_count})
        return json.loads(response_json)
    
    except:
        raise
        session.rollback()
    finally:
        session.close()


class DemographicListResource(Resource):
    # this is to get demographics by country
    def get(self):
        args = request.args
        rpp = int(args.get('rpp')) if args.get('rpp') else 1000
        page = int(args.get('page')) if args.get('page') else 0
        country = args.get('country') if args.get('country') else None 
        return demographic_service.get_demographics_by_country(country=country, rpp=rpp, page=page)

