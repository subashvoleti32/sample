import unittest
from unittest.mock import patch, MagicMock, Mock
from app import app, get_csv_file_names
from services.cost_file_service import get_csv_file_content

class TestApp(unittest.TestCase):

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)

        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]

        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs

        # Call the function with test data
        result = get_csv_file_names("US", "category")

        # Assertions
        mock_storage_client.assert_called_with(credentials=mock_credentials)
        mock_storage_client_instance.bucket.assert_called_with("your_bucket")
        mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
            prefix="ltvo_your_namespace/na/US/category"
        )

        expected_result = [{"csv_file_name": "file1.csv"}, {"csv_file_name": "file2.csv"}]
        self.assertEqual(result, expected_result)

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    @patch("services.cost_file_service.storage.Client")
    def test_read_csv_file_content_mocked_function(self, mock_storage_client, mock_default_credentials, mock_storage_client_services):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)

        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv")]

        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs
        mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"

        mock_storage_client_services_instance = mock_storage_client_services.return_value
        mock_storage_client_services_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"

        # Call the function with test data
        result = get_csv_file_content("US", "category", "file1.csv")

        # Assertions
        mock_storage_client.assert_called_with(credentials=mock_credentials)
        mock_storage_client_instance.bucket.assert_called_with("your_bucket")
        mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
            prefix="ltvo_your_namespace/na/US/category"
        )
        mock_storage_client_instance.bucket.return_value.blob.assert_called_with(
            "ltvo_your_namespace/na/US/category/file1.csv"
        )
        mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.assert_called_once()

        expected_result = '{"csv_file_name": "file1.csv"}'
        self.assertEqual(result, expected_result)

if __name__ == '__main__':
    unittest.main()






file /home/subash_vo/jan16/ds-cf-ltvo-ui-fc/ltvo-backend/tests/unit_tests/test_cost_file_service3.py, line 6
  @patch("google.auth.default")
  @patch("google.cloud.storage.Client")
  def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
E       fixture 'mock_default_credentials' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/subash_vo/jan16/ds-cf-ltvo-ui-fc/ltvo-backend/tests/unit_tests/test_cost_file_service3.py:6
_____________________________ ERROR at setup of test_read_csv_file_content_mocked_function ______________________________
file /home/subash_vo/jan16/ds-cf-ltvo-ui-fc/ltvo-backend/tests/unit_tests/test_cost_file_service3.py, line 32
  @patch("google.auth.default")
  @patch("google.cloud.storage.Client")
  @patch("services.cost_file_service.storage.Client")
  def test_read_csv_file_content_mocked_function(self, mock_storage_client, mock_default_credentials, mock_storage_client_services):
E       fixture 'mock_storage_client_services' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/subash_vo/jan16/ds-cf-ltvo-ui-fc/ltvo-backend/tests/unit_tests/test_cost_file_service3.py:32
4








# conftest.py
import pytest
from unittest.mock import MagicMock

@pytest.fixture
def mock_default_credentials(request):
    return MagicMock()

@pytest.fixture
def mock_storage_client(request):
    return MagicMock()

@pytest.fixture
def mock_storage_client_services(request):
    return MagicMock()


self = <MagicMock name='Client' id='136750836725984'>
mock_storage_client = <MagicMock name='default' id='136750833419120'>
mock_default_credentials = <MagicMock id='136751023560208'>

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)
    
        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]
    
        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs
    
        # Call the function with test data
        result = get_csv_file_names("US", "category")
    
        # Assertions
>       mock_storage_client.assert_called_with(credentials=mock_credentials)

test_cost_file_service3.py:23:


FAILED test_cost_file_service3.py::test_get_csv_file_names_mocked_function - AssertionError: expected call not found.
FAILED test_cost_file_service3.py::test_read_csv_file_content_mocked_function - AssertionError: expected call not found.



import unittest
from unittest.mock import patch, MagicMock, Mock
#from app import app, get_csv_file_names
from services.cost_file_service import get_csv_file_names,read_csv_file_content

@patch("google.auth.default")
@patch("google.cloud.storage.Client")
def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
    # Mock default credentials
    mock_credentials = MagicMock()
    mock_default_credentials.return_value = (mock_credentials, None)

    # Mocking necessary objects
    mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]

    mock_storage_client_instance = mock_storage_client.return_value
    mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs

    # Call the function with test data
    result = get_csv_file_names("US", "category")

    # Assertions
    mock_storage_client.assert_called_with(credentials=mock_credentials)
    mock_storage_client_instance.bucket.assert_called_with("your_bucket")
    mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
        prefix="ltvo_your_namespace/na/US/category"
    )

    expected_result = [{"csv_file_name": "file1.csv"}, {"csv_file_name": "file2.csv"}]
    self.assertEqual(result, expected_result)

@patch("google.auth.default")
@patch("google.cloud.storage.Client")
@patch("services.cost_file_service.storage.Client")
def test_read_csv_file_content_mocked_function(self, mock_storage_client, mock_default_credentials, mock_storage_client_services):
    # Mock default credentials
    mock_credentials = MagicMock()
    mock_default_credentials.return_value = (mock_credentials, None)

    # Mocking necessary objects
    mock_blobs = [Mock(name="file1.csv")]

    mock_storage_client_instance = mock_storage_client.return_value
    mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs
    mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"

    mock_storage_client_services_instance = mock_storage_client_services.return_value
    mock_storage_client_services_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"

    # Call the function with test data
    result = read_csv_file_content("US", "category", "file1.csv")

    # Assertions
    mock_storage_client.assert_called_with(credentials=mock_credentials)
    mock_storage_client_instance.bucket.assert_called_with("your_bucket")
    mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
        prefix="ltvo_your_namespace/na/US/category"
    )
    mock_storage_client_instance.bucket.return_value.blob.assert_called_with(
        "ltvo_your_namespace/na/US/category/file1.csv"
    )
    mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.assert_called_once()

    expected_result = '{"csv_file_name": "file1.csv"}'
    self.assertEqual(result, expected_result)















import unittest
from unittest.mock import patch, MagicMock, Mock
from services.cost_file_service import get_csv_file_names, read_csv_file_content

class TestCostFileService(unittest.TestCase):

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)

        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]

        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs

        # Call the function with test data
        result = get_csv_file_names("US", "category")

        # Assertions
        mock_storage_client.assert_called_with(credentials=mock_credentials)
        mock_storage_client_instance.bucket.assert_called_with("your_bucket")
        mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
            prefix="ltvo_your_namespace/na/US/category"
        )

        expected_result = [{"csv_file_name": "file1.csv"}, {"csv_file_name": "file2.csv"}]
        self.assertEqual(result, expected_result)





















import pytest
from unittest.mock import MagicMock, patch

@pytest.fixture
def mock_default_credentials():
    return patch("google.auth.default")

@pytest.fixture
def mock_storage_client(mock_default_credentials):
    mock_credentials = MagicMock()
    mock_default_credentials.return_value = (mock_credentials, None)

    with patch("google.cloud.storage.Client") as mock_storage_client:
        mock_storage_client_instance = mock_storage_client.return_value
        # Adjust the bucket name to match your actual bucket name or the one used in the code
        mock_storage_client_instance.bucket.return_value.name = "your_bucket"
        yield mock_storage_client

@pytest.fixture
def mock_storage_client_services(mock_default_credentials):
    mock_credentials = MagicMock()
    mock_default_credentials.return_value = (mock_credentials, None)

    with patch("services.cost_file_service.storage.Client") as mock_storage_client_services:
        mock_storage_client_services_instance = mock_storage_client_services.return_value
        # Adjust the bucket name to match your actual bucket name or the one used in the code
        mock_storage_client_services_instance.bucket.return_value.name = "your_bucket"
        yield mock_storage_client_services











import unittest
from unittest.mock import patch, MagicMock, Mock
from services.cost_file_service import get_csv_file_names, read_csv_file_content

@patch("google.auth.default")
@patch("google.cloud.storage.Client")
def test_get_csv_file_names_mocked_function(mock_storage_client, mock_default_credentials):
    # Mock default credentials
    mock_credentials = MagicMock()
    mock_default_credentials.return_value = (mock_credentials, None)

    # Mocking necessary objects
    mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]

    mock_storage_client_instance = mock_storage_client.return_value
    mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs

    # Call the function with test data
    result = get_csv_file_names("US", "category")

    # Assertions
    mock_storage_client.assert_called_with(credentials=mock_credentials)
    mock_storage_client_instance.bucket.assert_called_with("your_bucket")
    mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
        prefix="ltvo_your_namespace/na/US/category"
    )



mock_storage_client = <MagicMock name='Client' id='135902238755760'>
mock_default_credentials = <MagicMock name='Client' id='135902235865440'>
mock_storage_client_services = <MagicMock name='default' id='135902235688576'>

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    @patch("services.cost_file_service.storage.Client")
    def test_read_csv_file_content_mocked_function(mock_storage_client, mock_default_credentials, mock_storage_client_services):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)
    
        # Mocking necessary objects
        mock_blob = Mock(name="file1.csv")
    
        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = [mock_blob]
        mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"
    
        # Call the function with test data
        result = read_csv_file_content("US", "category", "file1.csv")
    
        # Assertions
>       mock_storage_client.assert_called_with()

test_cost_file_service5.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='Client' id='135902238755760'>, args = (), kwargs = {}, expected = 'Client()'
actual = 'not called.', error_message = 'expected call not found.\nExpected: Client()\nActual: not called.'

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
>           raise AssertionError(error_message)
E           AssertionError: expected call not found.
E           Expected: Client()
E           Actual: not called.

/usr/lib/python3.9/unittest/mock.py:898: AssertionError
    expected_result = [{"csv_file_name": "file1.csv"}, {"csv_file_name": "file2.csv"}]
    assert result == expected_result

@patch("google.auth.default")
@patch("google.cloud.storage.Client")
@patch("services.cost_file_service.storage.Client")
def test_read_csv_file_content_mocked_function(mock_storage_client, mock_default_credentials, mock_storage_client_services):
    # Mock default credentials
    mock_credentials = MagicMock()
    mock_default_credentials.return_value = (mock_credentials, None)

    # Mocking necessary objects
    mock_blob = Mock(name="file1.csv")

    mock_storage_client_instance = mock_storage_client.return_value
    mock_storage_client_instance.bucket.return_value.list_blobs.return_value = [mock_blob]
    mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"

    # Call the function with test data
    result = read_csv_file_content("US", "category", "file1.csv")

    # Assertions
    mock_storage_client.assert_called_with(credentials=mock_credentials)
    mock_storage_client_instance.bucket.assert_called_with("your_bucket")
    mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
        prefix="ltvo_your_namespace/na/US/category"
    )
    mock_storage_client_instance.bucket.return_value.blob.assert_called_with(
        "ltvo_your_namespace/na/US/category/file1.csv"
    )
    mock_blob.download_as_bytes.assert_called_once()

    expected_result = '{"csv_file_name": "file1.csv"}'
    assert result == expected_result


    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    @patch("services.cost_file_service.storage.Client")
    def test_read_csv_file_content_mocked_function(self, mock_storage_client, mock_default_credentials, mock_storage_client_services):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)

        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv")]

        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs
        mock_blob_instance = mock_storage_client_instance.bucket.return_value.blob.return_value
        mock_blob_instance.download_as_bytes.return_value.decode.return_value = "csv_data"

        # Call the function with test data
        result = read_csv_file_content("US", "category", "file1.csv")

        # Assertions
        mock_storage_client.assert_called_with(credentials=mock_credentials)
        mock_storage_client_instance.bucket.assert_called_with("your_bucket")
        mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
            prefix="ltvo_your_namespace/na/US/category"
        )
        mock_storage_client_instance.bucket.return_value.blob.assert_called_with(
            "ltvo_your_namespace/na/US/category/file1.csv"
        )
        mock_blob_instance.download_as_bytes.assert_called_once()

        expected_result = '{"csv_file_name": "file1.csv"}'
        self.assertEqual(result, expected_result)

if __name__ == '__main__':
    unittest.main()


self = <MagicMock name='Client' id='139036575808720'>, args = ()
kwargs = {'credentials': <MagicMock id='139036575808576'>}
expected = "Client(credentials=<MagicMock id='139036575808576'>)", actual = 'not called.'
error_message = "expected call not found.\nExpected: Client(credentials=<MagicMock id='139036575808576'>)\nActual: not called."

this is the reason for the assertion error



mock_storage_client = <MagicMock name='Client' id='135902238755760'>
mock_default_credentials = <MagicMock name='Client' id='135902235865440'>
mock_storage_client_services = <MagicMock name='default' id='135902235688576'>

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    @patch("services.cost_file_service.storage.Client")
    def test_read_csv_file_content_mocked_function(mock_storage_client, mock_default_credentials, mock_storage_client_services):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)
    
        # Mocking necessary objects
        mock_blob = Mock(name="file1.csv")
    
        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = [mock_blob]
        mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"
    
        # Call the function with test data
        result = read_csv_file_content("US", "category", "file1.csv")
    
        # Assertions
>       mock_storage_client.assert_called_with()

test_cost_file_service5.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='Client' id='135902238755760'>, args = (), kwargs = {}, expected = 'Client()'
actual = 'not called.', error_message = 'expected call not found.\nExpected: Client()\nActual: not called.'

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
>           raise AssertionError(error_message)
E           AssertionError: expected call not found.
E           Expected: Client()
E           Actual: not called.

/usr/lib/python3.9/unittest/mock.py:898: AssertionError
















@patch("google.auth.default")
@patch("google.cloud.storage.Client")
def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
    # Mock default credentials
    mock_credentials = MagicMock()
    mock_default_credentials.return_value = (mock_credentials, None)

    # Mocking necessary objects
    mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]

    mock_storage_client_instance = mock_storage_client.return_value
    mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs

    # Call the function with test data
    result = get_csv_file_names("US", "category")

    # Assertions
    mock_storage_client.assert_called_with()  # Adjusted the assertion to match 'Client()'
    mock_storage_client_instance.bucket.assert_called_with("your_bucket")  # Adjust 'your_bucket' accordingly
    mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
        prefix="ltvo_your_namespace/na/US/category"
    )

    expected_result = [{"csv_file_name": "file1.csv"}, {"csv_file_name": "file2.csv"}]
    self.assertEqual(result, expected_result)





self = <MagicMock name='Client' id='133291568635136'>
mock_storage_client = <MagicMock name='default' id='133291568093120'>
mock_default_credentials = <unittest.mock._patch object at 0x793a5c999f10>







FAILED test_cost_file_service5.py::test_get_csv_file_names_mocked_function - AssertionError: Expected 'default' to be called once. Called 0 times.
FAILED test_cost_file_service5.py::test_get_csv_file_names_mocked_function1 - AssertionError: expected call not found.
FAILED test_cost_file_service5.py::test_read_csv_file_content_mocked_function - AssertionError: expected call not found.


self = <MagicMock name='default' id='133291568093120'>, args = (), kwargs = {}, expected = 'default()'
actual = 'not called.', error_message = 'expected call not found.\nExpected: default()\nActual: not called.'














"[\n  {\n    \"\": \"322\",\n    \"element_name\": \"BET_Base\",\n    \"grouping_description\": \"Base\",\n    \"type\": \"Unwired\",\n    \"supplier\": \"Paramount\",\n    \"channel_name\": \"BET\",\n    \"start_day\": \"0\",\n    \"end_day\": \"6\",\n    \"start_time\": \"7:00:00 AM\",\n    \"end_time\": \"3:00:00 AM\",\n    \"include_program_type_name\": \"FALSE\",\n    \"program_type_name\": \"\\\"SPORTS ANTHOLOGY;SPORTS ANTHOLOGY;SPORTS EVENT;SPORTS NEWS;AWARD CEREMONIES\",\n    \"include_program_event_name\": \" PAGEANTS\\\"\",\n    \"program_event_name\": \"FALSE\",\n    \"include_program_name\": \"0\",\n    \"program_name\": \"\",\n    \"base_limit\": \"\",\n    \"tier_1_premium\": \"41585.3925\",\n    \"tier_1_limit\": \"0\",\n    \"tier_2_premium\": \"0\",\n    \"tier_2_limit\": \"0\",\n    \"tier_3_premium\": \"0\",\n    \"tier_3_limit\": \"0\",\n    \"min_grp\": \"0\",\n    \"max_grp\": \"0\",\n    \"min_total_budget\": \"100\",\n    \"max_total_budget\": \"0\",\n    \"group_min_budget\": \"999999999\",\n    \"group_max_budget\": \"0\",\n    \"group_min_grp_pct\": \"999999999\",\n    \"group_max_grp_pct\": \"0\",\n    \"guarantee_demo\": \"100\",\n    \"category\": \"W1864\",\n    \"quarter\": \"FABRIC\",\n    \"cost_per_point\": \"OND'23\",\n    \"cost_per_unit\": \"0\",\n    \"spend\": \"1039.634813\",\n    \"cost_range_low\": \"41585.3925\",\n    \"cost_range_high\": \"1\",\n    \"alt_spend\": \"1\",\n    \"product_name\": \"41585.3925\",\n    \"template\": \"ALL_FHC\"\n  }\n]"





def read_csv_file_content(country,category,file_name):
    storage_client=storage.Client()
    bucket_name=get_app_configs().get(ESM_GCS_BUCKET)
    app_logger.info(f"Bucket_name is {bucket_name}")
    ns=get_app_configs().get(NAMESPACE)
    app_logger.info(f"Namespace:{ns}")
    blob_prefix=f"ltvo_{ns}/na/{country}/{category}"
    app_logger.info(f"file path in GCS Bucket :{blob_prefix}")
    bucket = storage_client.bucket(bucket_name)
    blobs=list(bucket.list_blobs(prefix=blob_prefix))
    app_logger.info(f"Blobs:{blobs}")
    csv_file_names=[blob.name.split("/")[-1] for blob in blobs if blob.name.lower().endswith(".csv")]
    app_logger.info(f"csv_file_names:{csv_file_names}")
    try:
        if file_name in csv_file_names:
            blob_name=f"ltvo_{ns}/na/{country}/{category}"+"/"+file_name
            app_logger.info(f"file path for specified file:{blob_name}")
            blob = bucket.blob(blob_name)
            rows = blob.download_as_bytes().decode().splitlines()
            rows_list=list(csv.reader(rows))
            app_logger.info(f"list of rows in csv file:{list(csv.reader(rows))}")
            app_logger.info(f"List of rows in the csv file:{rows_list[0]}")
            header = rows[0].split(',')
            app_logger.info(f"Headers in the csv file:{header}")
            data_list = []
            for row in rows[1:]:
                row_values = row.split(',')
                data_dict = {header[i]: row_values[i] for i in range(len(header))}
                data_list.append(data_dict)
                app_logger.info(f"final_data{data_list}")
                #Convert the list to JSON
                json_data = json.dumps(data_list, indent=2)
                app_logger.info(f"Final Json Data is :{json_data}")
                return json_data
        else:
                return f"Filename{file_name} doesnot exist in {bucket_name}"
    except Exception as e:
        return f"Exception is {str(e)}"












________________________________________ test_get_csv_file_names_mocked_function ________________________________________

self = <MagicMock name='Client' id='133428836881984'>
mock_storage_client = <MagicMock name='default' id='133428836918656'>
mock_default_credentials = <MagicMock name='default' id='133428837445104'>

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)
    
        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]
    
        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs
    
        # Call the function with test data
        result = get_csv_file_names("US", "category")
    
        # Assertions
>       mock_storage_client.assert_called_once_with()  # Adjusted the assertion to match 'Client()'

test_cost_file_service5.py:26: 


self = <MagicMock name='default' id='133428836918656'>, args = (), kwargs = {}
msg = "Expected 'default' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'default' to be called once. Called 0 times.

/usr/lib/python3.9/unittest/mock.py:918: AssertionError













@patch("google.auth.default")
@patch("google.cloud.storage.Client")
def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
    # Mock default credentials
    mock_credentials = MagicMock()
    mock_default_credentials.return_value = (mock_credentials, None)

    # Mocking necessary objects
    mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]

    # Monkey patch the google.cloud.storage.Client to return our mock
    with patch("google.cloud.storage.Client") as mock_storage_client_instance:
        mock_storage_client_instance.return_value.bucket.return_value.list_blobs.return_value = mock_blobs

        # Call the function with test data
        result = get_csv_file_names("US", "category")

        # Assertions
        mock_storage_client_instance.assert_called_once_with(credentials=mock_credentials)
        mock_storage_client_instance.bucket.assert_called_with("your_bucket")
        mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
            prefix="ltvo_your_namespace/na/US/category"
        )

        expected_result = [{"csv_file_name": "file1.csv"}, {"csv_file_name": "file2.csv"}]
        self.assertEqual(result, expected_result)











======================================================== ERRORS =========================================================
______________________________ ERROR at setup of test_get_csv_file_names_mocked_function6 _______________________________
file /home/subash_vo/jan16/ds-cf-ltvo-ui-fc/ltvo-backend/tests/unit_tests/test_cost_file_service5.py, line 6
  @pytest.mark.usefixtures('mock_default_credentials','mock_storage_client')
  def test_get_csv_file_names_mocked_function6(self,mocker):
file /home/subash_vo/jan16/ds-cf-ltvo-ui-fc/ltvo-backend/tests/unit_tests/conftest.py, line 35
  @pytest.fixture
  def mock_default_credentials(mocker):
E       fixture 'mocker' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, mock_default_credentials, mock_storage_client, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

self = <MagicMock name='Client' id='140235419023152'>, args = ()
kwargs = {'credentials': <MagicMock id='140235418970480'>}, expected = call(credentials=<MagicMock id='140235418970480'>)
actual = call(), _error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f8b1a5bf820>
cause = None








import pytest
from unittest.mock import MagicMock

@pytest.fixture
def mock_default_credentials(mocker):
    return mocker.patch("google.auth.default", autospec=True)

@pytest.fixture
def mock_storage_client(mocker):
    return mocker.patch("google.cloud.storage.Client", autospec=True)

@pytest.fixture
def mock_storage_client_instance(mock_storage_client):
    return mock_storage_client.return_value




import pytest
from unittest.mock import Mock, patch
from app import get_csv_file_names

class TestCostFileService:

    @pytest.mark.usefixtures('mock_default_credentials', 'mock_storage_client_instance')
    def test_get_csv_file_names_mocked_function6(self, mock_storage_client_instance):
        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs

        # Call the function with test data
        result = get_csv_file_names("US", "category")

        # Assertions
        mock_storage_client_instance.bucket.assert_called_with("your_bucket")
        mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
            prefix="ltvo_your_namespace/na/US/category"
        )

        expected_result = [{"csv_file_name": "file1.csv"}, {"csv_file_name": "file2.csv"}]
        assert result == expected_result


Traceback (most recent call last):   File "/usr/local/lib/python3.8/logging/__init__.py", line 1084, in emit     stream.write(msg + self.terminator) BlockingIOError: [Errno 11] write could not complete without blocking














import logging
import sys

class LessThanFilter(logging.Filter):
    def __init__(self, level):
        self.level = level

    def filter(self, record):
        return record.levelno < self.level

class SingletonLogger:
    _instance = None

    @staticmethod
    def get_instance():
        if SingletonLogger._instance is None:
            SingletonLogger()
        return SingletonLogger._instance

    def __init__(self):
        if SingletonLogger._instance is not None:
            raise Exception("SingletonLogger is already instantiated")
        else:
            self.logger = logging.getLogger("my_app")
            self.logger.setLevel(logging.INFO)

            formatter = logging.Formatter('%(message)s  -- LogLevel:- %(levelname)s -- FileName:- %(filename)s -- LineNumber :- %(lineno)d ')

            logging_handler_out = logging.StreamHandler(sys.stdout)
            logging_handler_out.setLevel(logging.INFO)
            logging_handler_out.addFilter(LessThanFilter(logging.WARNING))
            logging_handler_out.setFormatter(formatter)
            self.logger.addHandler(logging_handler_out)

            logging_handler_err = logging.StreamHandler(sys.stderr)
            logging_handler_err.setLevel(logging.WARNING)
            logging_handler_err.setFormatter(formatter)
            self.logger.addHandler(logging_handler_err)

            SingletonLogger._instance = self

def configure_logger():
    logger = SingletonLogger.get_instance().logger
    return logger
