import unittest
from unittest.mock import patch, MagicMock, Mock
from app import app, get_csv_file_names
from services.cost_file_service import get_csv_file_content

class TestApp(unittest.TestCase):

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)

        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]

        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs

        # Call the function with test data
        result = get_csv_file_names("US", "category")

        # Assertions
        mock_storage_client.assert_called_with(credentials=mock_credentials)
        mock_storage_client_instance.bucket.assert_called_with("your_bucket")
        mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
            prefix="ltvo_your_namespace/na/US/category"
        )

        expected_result = [{"csv_file_name": "file1.csv"}, {"csv_file_name": "file2.csv"}]
        self.assertEqual(result, expected_result)

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    @patch("services.cost_file_service.storage.Client")
    def test_read_csv_file_content_mocked_function(self, mock_storage_client, mock_default_credentials, mock_storage_client_services):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)

        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv")]

        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs
        mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"

        mock_storage_client_services_instance = mock_storage_client_services.return_value
        mock_storage_client_services_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"

        # Call the function with test data
        result = get_csv_file_content("US", "category", "file1.csv")

        # Assertions
        mock_storage_client.assert_called_with(credentials=mock_credentials)
        mock_storage_client_instance.bucket.assert_called_with("your_bucket")
        mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
            prefix="ltvo_your_namespace/na/US/category"
        )
        mock_storage_client_instance.bucket.return_value.blob.assert_called_with(
            "ltvo_your_namespace/na/US/category/file1.csv"
        )
        mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.assert_called_once()

        expected_result = '{"csv_file_name": "file1.csv"}'
        self.assertEqual(result, expected_result)

if __name__ == '__main__':
    unittest.main()






file /home/subash_vo/jan16/ds-cf-ltvo-ui-fc/ltvo-backend/tests/unit_tests/test_cost_file_service3.py, line 6
  @patch("google.auth.default")
  @patch("google.cloud.storage.Client")
  def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
E       fixture 'mock_default_credentials' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/subash_vo/jan16/ds-cf-ltvo-ui-fc/ltvo-backend/tests/unit_tests/test_cost_file_service3.py:6
_____________________________ ERROR at setup of test_read_csv_file_content_mocked_function ______________________________
file /home/subash_vo/jan16/ds-cf-ltvo-ui-fc/ltvo-backend/tests/unit_tests/test_cost_file_service3.py, line 32
  @patch("google.auth.default")
  @patch("google.cloud.storage.Client")
  @patch("services.cost_file_service.storage.Client")
  def test_read_csv_file_content_mocked_function(self, mock_storage_client, mock_default_credentials, mock_storage_client_services):
E       fixture 'mock_storage_client_services' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/home/subash_vo/jan16/ds-cf-ltvo-ui-fc/ltvo-backend/tests/unit_tests/test_cost_file_service3.py:32
4








# conftest.py
import pytest
from unittest.mock import MagicMock

@pytest.fixture
def mock_default_credentials(request):
    return MagicMock()

@pytest.fixture
def mock_storage_client(request):
    return MagicMock()

@pytest.fixture
def mock_storage_client_services(request):
    return MagicMock()


self = <MagicMock name='Client' id='136750836725984'>
mock_storage_client = <MagicMock name='default' id='136750833419120'>
mock_default_credentials = <MagicMock id='136751023560208'>

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)
    
        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]
    
        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs
    
        # Call the function with test data
        result = get_csv_file_names("US", "category")
    
        # Assertions
>       mock_storage_client.assert_called_with(credentials=mock_credentials)

test_cost_file_service3.py:23:


FAILED test_cost_file_service3.py::test_get_csv_file_names_mocked_function - AssertionError: expected call not found.
FAILED test_cost_file_service3.py::test_read_csv_file_content_mocked_function - AssertionError: expected call not found.



import unittest
from unittest.mock import patch, MagicMock, Mock
#from app import app, get_csv_file_names
from services.cost_file_service import get_csv_file_names,read_csv_file_content

@patch("google.auth.default")
@patch("google.cloud.storage.Client")
def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
    # Mock default credentials
    mock_credentials = MagicMock()
    mock_default_credentials.return_value = (mock_credentials, None)

    # Mocking necessary objects
    mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]

    mock_storage_client_instance = mock_storage_client.return_value
    mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs

    # Call the function with test data
    result = get_csv_file_names("US", "category")

    # Assertions
    mock_storage_client.assert_called_with(credentials=mock_credentials)
    mock_storage_client_instance.bucket.assert_called_with("your_bucket")
    mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
        prefix="ltvo_your_namespace/na/US/category"
    )

    expected_result = [{"csv_file_name": "file1.csv"}, {"csv_file_name": "file2.csv"}]
    self.assertEqual(result, expected_result)

@patch("google.auth.default")
@patch("google.cloud.storage.Client")
@patch("services.cost_file_service.storage.Client")
def test_read_csv_file_content_mocked_function(self, mock_storage_client, mock_default_credentials, mock_storage_client_services):
    # Mock default credentials
    mock_credentials = MagicMock()
    mock_default_credentials.return_value = (mock_credentials, None)

    # Mocking necessary objects
    mock_blobs = [Mock(name="file1.csv")]

    mock_storage_client_instance = mock_storage_client.return_value
    mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs
    mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"

    mock_storage_client_services_instance = mock_storage_client_services.return_value
    mock_storage_client_services_instance.bucket.return_value.blob.return_value.download_as_bytes.return_value.decode.return_value = "csv_data"

    # Call the function with test data
    result = read_csv_file_content("US", "category", "file1.csv")

    # Assertions
    mock_storage_client.assert_called_with(credentials=mock_credentials)
    mock_storage_client_instance.bucket.assert_called_with("your_bucket")
    mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
        prefix="ltvo_your_namespace/na/US/category"
    )
    mock_storage_client_instance.bucket.return_value.blob.assert_called_with(
        "ltvo_your_namespace/na/US/category/file1.csv"
    )
    mock_storage_client_instance.bucket.return_value.blob.return_value.download_as_bytes.assert_called_once()

    expected_result = '{"csv_file_name": "file1.csv"}'
    self.assertEqual(result, expected_result)















import unittest
from unittest.mock import patch, MagicMock, Mock
from services.cost_file_service import get_csv_file_names, read_csv_file_content

class TestCostFileService(unittest.TestCase):

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    def test_get_csv_file_names_mocked_function(self, mock_storage_client, mock_default_credentials):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)

        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv"), Mock(name="file2.csv")]

        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs

        # Call the function with test data
        result = get_csv_file_names("US", "category")

        # Assertions
        mock_storage_client.assert_called_with(credentials=mock_credentials)
        mock_storage_client_instance.bucket.assert_called_with("your_bucket")
        mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
            prefix="ltvo_your_namespace/na/US/category"
        )

        expected_result = [{"csv_file_name": "file1.csv"}, {"csv_file_name": "file2.csv"}]
        self.assertEqual(result, expected_result)

    @patch("google.auth.default")
    @patch("google.cloud.storage.Client")
    @patch("services.cost_file_service.storage.Client")
    def test_read_csv_file_content_mocked_function(self, mock_storage_client, mock_default_credentials, mock_storage_client_services):
        # Mock default credentials
        mock_credentials = MagicMock()
        mock_default_credentials.return_value = (mock_credentials, None)

        # Mocking necessary objects
        mock_blobs = [Mock(name="file1.csv")]

        mock_storage_client_instance = mock_storage_client.return_value
        mock_storage_client_instance.bucket.return_value.list_blobs.return_value = mock_blobs
        mock_blob_instance = mock_storage_client_instance.bucket.return_value.blob.return_value
        mock_blob_instance.download_as_bytes.return_value.decode.return_value = "csv_data"

        # Call the function with test data
        result = read_csv_file_content("US", "category", "file1.csv")

        # Assertions
        mock_storage_client.assert_called_with(credentials=mock_credentials)
        mock_storage_client_instance.bucket.assert_called_with("your_bucket")
        mock_storage_client_instance.bucket.return_value.list_blobs.assert_called_with(
            prefix="ltvo_your_namespace/na/US/category"
        )
        mock_storage_client_instance.bucket.return_value.blob.assert_called_with(
            "ltvo_your_namespace/na/US/category/file1.csv"
        )
        mock_blob_instance.download_as_bytes.assert_called_once()

        expected_result = '{"csv_file_name": "file1.csv"}'
        self.assertEqual(result, expected_result)

if __name__ == '__main__':
    unittest.main()
