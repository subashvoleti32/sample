{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin" : "*",
          "Access-Control-Allow-Methods" : "*",
          "Access-Control-Allow-Headers": "Accept, Content-Type, Content-Encoding, Server, Transfer-Encoding"
        },
        "jsonBody": []
        
    }
}



-------------------------------------
{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin" : "*",
          "Access-Control-Allow-Methods" : "*",
          "Access-Control-Allow-Headers": "Accept, Content-Type, Content-Encoding, Server, Transfer-Encoding"
        },
        "jsonBody": []
    }
},
{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 400,
        "headers": {
          "Content-Type": "application/json"
        },
        "jsonBody": {
            "error": "Bad Request"
        }
    }
},
{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 500,
        "headers": {
          "Content-Type": "application/json"
        },
        "jsonBody": {
            "error": "Internal Server Error"
        }
    }
},
{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 404,
        "headers": {
          "Content-Type": "application/json"
        },
        "jsonBody": {
            "error": "Not Found"
        }
    }
}
---------------------------------------------
import logging
app.logger.setLevel(logging.INFO)
console_handler=logging.StreamHandler()
console_handler.setLevel(logging.INFO)
app.logger.addHandler(console_handler)
app.logger.info(f"Input data is {data}")














-----------------------------
import logging

def configure_logger():
    logger = logging.getLogger("my_app")
    logger.setLevel(logging.INFO)

    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    return logger

# You can add more functions or customization to this module as needed.
import my_logger

app_logger = my_logger.configure_logger()

data = "some data"
app_logger.info(f"Input data is {data}")

--------------------------------------------------------------
class OptimizationResource(Resource):
    def post(self):
        input_json = request.get_json()
        Optimization = optimization_service.create(input_json=input_json)
        return Optimization

    def get(self, id):
        Optimization = optimization_service.get_by_id(id)
        return Optimization

    def put(self, id):
        input_json = request.get_json()
        Optimization = optimization_service.update(id, input_json)
        return Optimization

    def delete(self, id):
        return optimization_service.delete(id)

class OptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp')) if args.get('rpp') else 50
        page = int(args.get('page')) if args.get('page') else 0
        country = str(args.get('country')) if args.get('country') else None
        category = str(args.get('category')) if args.get('category') else None
        status = (str(args.get('status')).split(',')) if args.get('status') else None
        app_logger.info(f"rpp value:{rpp}, page:{page}, country:{country},category:{category},status:{status}")
        optimizations = optimization_service.get_optimizations(rpp=rpp,page=page,country=country,category=category, status=status )
        return optimizations

class DevOptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp')) if args.get('rpp') else 50
        page = int(args.get('page')) if args.get('page') else 0
        country = str(args.get('country')) if args.get('country') else None
        category = str(args.get('category')) if args.get('category') else None
        status = (str(args.get('status')).split(',')) if args.get('status') else None
        optimizations = optimization_service.get_optimizations_by_country(rpp=rpp,page=page,country=country, status=status )
        return optimizations



from http import HTTPStatus

class BaseExceptionClass(Exception):
    def __init__(self, status_code: int, description: str, data: dict):
        self.exception_case = self.__class__.__name__
        self.status_code = status_code
        self.data = data
        self.description = description

    def __str__(self):
        return (
                f"<Exception: " f"status_code: {self.status_code} "
                + f"Details: {self.description} - " f"Data: {self.data}>"
        )

class AppException(object):
    class DuplicateName(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.CONFLICT,
                     description: str = " Duplicate Name: ",
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)

    class UserNotFound(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.NOT_FOUND,
                     description: str = " User Not Found: ",
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)

    class DatabaseException(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.INTERNAL_SERVER_ERROR,
                     description: str = 'Database Error: ',
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)
    class PostRequestException(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.INTERNAL_SERVER_ERROR,
                     description: str = 'PostRequest Error: ',
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)
