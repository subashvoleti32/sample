{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin" : "*",
          "Access-Control-Allow-Methods" : "*",
          "Access-Control-Allow-Headers": "Accept, Content-Type, Content-Encoding, Server, Transfer-Encoding"
        },
        "jsonBody": []
        
    }
}



-------------------------------------
{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin" : "*",
          "Access-Control-Allow-Methods" : "*",
          "Access-Control-Allow-Headers": "Accept, Content-Type, Content-Encoding, Server, Transfer-Encoding"
        },
        "jsonBody": []
    }
},
{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 400,
        "headers": {
          "Content-Type": "application/json"
        },
        "jsonBody": {
            "error": "Bad Request"
        }
    }
},
{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 500,
        "headers": {
          "Content-Type": "application/json"
        },
        "jsonBody": {
            "error": "Internal Server Error"
        }
    }
},
{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 404,
        "headers": {
          "Content-Type": "application/json"
        },
        "jsonBody": {
            "error": "Not Found"
        }
    }
}
---------------------------------------------
import logging
app.logger.setLevel(logging.INFO)
console_handler=logging.StreamHandler()
console_handler.setLevel(logging.INFO)
app.logger.addHandler(console_handler)
app.logger.info(f"Input data is {data}")














-----------------------------
import logging

def configure_logger():
    logger = logging.getLogger("my_app")
    logger.setLevel(logging.INFO)

    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    return logger

# You can add more functions or customization to this module as needed.
import my_logger

app_logger = my_logger.configure_logger()

data = "some data"
app_logger.info(f"Input data is {data}")

--------------------------------------------------------------
class OptimizationResource(Resource):
    def post(self):
        input_json = request.get_json()
        Optimization = optimization_service.create(input_json=input_json)
        return Optimization

    def get(self, id):
        Optimization = optimization_service.get_by_id(id)
        return Optimization

    def put(self, id):
        input_json = request.get_json()
        Optimization = optimization_service.update(id, input_json)
        return Optimization

    def delete(self, id):
        return optimization_service.delete(id)

class OptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp')) if args.get('rpp') else 50
        page = int(args.get('page')) if args.get('page') else 0
        country = str(args.get('country')) if args.get('country') else None
        category = str(args.get('category')) if args.get('category') else None
        status = (str(args.get('status')).split(',')) if args.get('status') else None
        app_logger.info(f"rpp value:{rpp}, page:{page}, country:{country},category:{category},status:{status}")
        optimizations = optimization_service.get_optimizations(rpp=rpp,page=page,country=country,category=category, status=status )
        return optimizations

class DevOptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp')) if args.get('rpp') else 50
        page = int(args.get('page')) if args.get('page') else 0
        country = str(args.get('country')) if args.get('country') else None
        category = str(args.get('category')) if args.get('category') else None
        status = (str(args.get('status')).split(',')) if args.get('status') else None
        optimizations = optimization_service.get_optimizations_by_country(rpp=rpp,page=page,country=country, status=status )
        return optimizations



from http import HTTPStatus

class BaseExceptionClass(Exception):
    def __init__(self, status_code: int, description: str, data: dict):
        self.exception_case = self.__class__.__name__
        self.status_code = status_code
        self.data = data
        self.description = description

    def __str__(self):
        return (
                f"<Exception: " f"status_code: {self.status_code} "
                + f"Details: {self.description} - " f"Data: {self.data}>"
        )

class AppException(object):
    class DuplicateName(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.CONFLICT,
                     description: str = " Duplicate Name: ",
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)

    class UserNotFound(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.NOT_FOUND,
                     description: str = " User Not Found: ",
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)

    class DatabaseException(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.INTERNAL_SERVER_ERROR,
                     description: str = 'Database Error: ',
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)
    class PostRequestException(BaseExceptionClass):
        def __init__(self, status_code: int = HTTPStatus.INTERNAL_SERVER_ERROR,
                     description: str = 'PostRequest Error: ',
                     data: dict = None):
            BaseExceptionClass.__init__(self, status_code, description, data)


--------------------------------------------
class UserProfileResource(Resource):
    def get(self):
        user_email = get_email_from_jwt(request)
        user_profile = get_user_profile(user_email)
        return user_profile
def get_email_from_jwt(request):
    if os.getenv('ACTIVE_PROFILE') == 'LOCAL':
        return os.getenv('LOCAL_USER_EMAIL') or 'local_user@pg.com'
    decoded_jwt = jwt.decode(
        request.headers["X-Goog-IAP-JWT-Assertion"], verify=False)
    return decoded_jwt['email']


def get_user_profile(email):
    user_profile = {
        "users_markets": [
        ]
    }
    
    users_groups = get_groups_for_user(email)
    session['is_admin'] = 'CNF-gcpcl-ltvo-ui-na-adm' in users_groups or 'CNF-gcpcl-ltvo-ui-fc-admin' in users_groups

    group_codes_list = get_codes_for_group(users_groups, is_admin=session['is_admin'])
    for group_codes in group_codes_list:
        if not _check_if_country_exists_in_profile(group_codes["country"], user_profile):
            _append_country_to_profile(
                group_codes["country"], user_profile)
            _append_category_to_country(
                group_codes["country"], group_codes["category"], user_profile)
        else:
            _append_category_to_country(
                group_codes["country"], group_codes["category"], user_profile)

    session['profile'] = set_user_profile(user_profile)
    
    return user_profile


def _check_if_country_exists_in_profile(country, user_profile):
    for market in user_profile["users_markets"]:
        if market["country"]["code"] == country["code"]:
            return True
    return False


def _append_country_to_profile(country, user_profile):
    user_profile["users_markets"].append({
        "country": country,
        "categories": []
    })


def _append_category_to_country(country, category, user_profile):
    for market in user_profile["users_markets"]:
        if market["country"]["code"] == country["code"]:
            market["categories"].append(category)


def get_codes_for_group(groups_list, is_admin=False):

    session = _init_session()
    group_codes_list = []

    if is_admin:
        groups = session.query(AccessGroups).all()            
    else:
        groups = session.query(AccessGroups).filter(AccessGroups.group_name.in_(groups_list)).all()

    for group in groups:
        # TODO: this is temporary because it would require changing a whole table 
        if group.group_name == "CNF-gcpcl-ltvo-ui-ca-por" and group.country_code == 'CAN':
            portfolio_english = {
                "category": {
                    "name": 'PORTFOLIO_ENGLISH',
                    "code": 'PRE'
                },
                "country": {
                    "name": 'Canada',
                    "code": 'CAN'
                } 
            }
            portfolio_french = {
                "category": {
                    "name": 'PORTFOLIO_FRENCH',
                    "code": 'PRF'
                },
                "country": {
                    "name": 'Canada',
                    "code": 'CAN'
                } 
            }
            group_codes = {
                "category": {
                    "name": group.category,
                    "code": group.category_code
                },
                "country": {
                    "name": group.country,
                    "code": group.country_code
                } 
            }
            group_codes_list.append(portfolio_english)
            group_codes_list.append(portfolio_french)
            group_codes_list.append(group_codes)

        else:
            group_codes = {
                "category": {
                    "name": group.category,
                    "code": group.category_code
                },
                "country": {
                    "name": group.country,
                    "code": group.country_code
                } 
            }
            group_codes_list.append(group_codes)
        
    session.close()
    return group_codes_list

        


def get_groups_for_user(email):
    # users_groups = []
    # for group in TEMP_GROUPS:
    #     if email in group["members"]:
    #         users_groups.append(group["group_name"])
    # return users_groups
    creds = compute_engine.Credentials()
    service = discovery.build("admin", "directory_v1", credentials=creds)
    groups = service.groups().list(domain="groups.pg.com",
                                   query=f"memberKey={email}").execute()

    # filter the groups
    prefix_filter = 'CNF-GCPCL-LTVO-UI-'
    groups["groups"]
    filtered_groups = [g["name"] for g in groups["groups"]
                       if g["name"].upper().startswith(prefix_filter)]
    return filtered_groups


def set_user_profile(access_groups):

    profile = {}

    for group in access_groups['users_markets']:
        if group['country']['code'] not in profile:
            profile[group['country']['code']] = [
                category['code'] for category in group['categories']
                ] 
    
    return profile
