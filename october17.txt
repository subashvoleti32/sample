{
    "request": {
        "urlPathPattern": "/api/v2/optimization",
        "method": "GET",
        "queryParameters": {
            "country": {
                "equalTo": "USA"
            },
            "category":{
                "equalTo":"FHC"
            },
            "status":{
                "matches":".*"
            }
        }
    },
    "response": {
        "status": 200,
        "body":{
            "Optimization_name":"Hair_Template",
            "Time_period":"08/26/2022-12/31/2023",
            "Objective":"Max.Reach",
            "Partitions":"1",
            "Breaks":"1",
            "Owner":"Subash@pg.com",
            "Createdon":"08/26/2022 8:22",
            "Scenarioid":"qwer12343",
            "Status":"In Progress"
        }
    }
}

Attaching to wiremock
wiremock  | Exception in thread "main" com.github.tomakehurst.wiremock.standalone.MappingFileException: Error loading file /home/wiremock/./mappings/optimization_list.json:
wiremock  | Cannot deserialize value of type `java.lang.String` from Object value (token `JsonToken.START_OBJECT`)
wiremock  |     at com.github.tomakehurst.wiremock.standalone.JsonFileMappingsSource.loadMappingsInto(JsonFileMappingsSource.java:123)
wiremock  |     at com.github.tomakehurst.wiremock.core.WireMockApp.loadMappingsUsing(WireMockApp.java:248)
wiremock  |     at com.github.tomakehurst.wiremock.core.WireMockApp.loadDefaultMappings(WireMockApp.java:242)
wiremock  |     at com.github.tomakehurst.wiremock.core.WireMockApp.<init>(WireMockApp.java:123)
wiremock  |     at com.github.tomakehurst.wiremock.WireMockServer.<init>(WireMockServer.java:71)
wiremock  |     at com.github.tomakehurst.wiremock.standalone.WireMockServerRunner.run(WireMockServerRunner.java:70)
wiremock  |     at wiremock.Run.main(Run.java:23)
wiremock exited with code 1



{
    "request": {
        "url": "localhost:8080/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 200,
        "jsonBody":{
            "Optimization_name":"Hair_Template",
            "Time_period":"08/26/2022-12/31/2023",
            "Objective":"Max.Reach",
            "Partitions":"1",
            "Breaks":"1",
            "Owner":"Subash@pg.com",
            "Createdon":"08/26/2022 8:22",
            "Scenarioid":"qwer12343",
            "Status":"In Progress"
        }
    }
}

| Closest stub                                             | Request                                                  |
-----------------------------------------------------------------------------------------------------------------------
                                                           |
GET                                                        | GET
localhost:8080/api/v2/optimization/list                    | /api/v2/optimization/list?country=USA&category=FHC&status<<<<< URL does not match. URLs must start with a /
                                                           | =Running,Succeded,Failed
                                                           |
Query: country = USA                                       | country: USA
Query: category = FHC                                      | category: FHC
Query: status [matches] Running,Succeded,Failed            | status: Running,Succeded,Failed



{
    "request": {
        "url": "/api/v2/optimization/list?country=USA&category=FHC&status=Running,Succeded,Failed",
        "method": "GET"
    },
    "response": {
        "status": 200,
        "jsonBody": {
            "Optimization_name": "Hair_Template",
            "Time_period": "08/26/2022-12/31/2023",
            "Objective": "Max.Reach",
            "Partitions": "1",
            "Breaks": "1",
            "Owner": "Subash@pg.com",
            "Createdon": "08/26/2022 8:22",
            "Scenarioid": "qwer12343",
            "Status": "In Progress"
        }
    }



from flask import Flask, request, jsonify
from flask_restful import Resource, Api
from flask_cors import CORS
from flask.logging import default_handler

app = Flask(__name__)
api = Api(app)
CORS(app)

# Sample data for demonstration purposes
mock_optimizations = [
    {
        "id": 1,
        "owner_email": "user1@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 1",
        "country": "USA",
        "category": "Marketing",
    },
    {
        "id": 2,
        "owner_email": "user2@example.com",
        "status": "Completed",
        "optimization_name": "Mock Optimization 2",
        "country": "Canada",
        "category": "Sales",
    },
    {
        "id": 3,
        "owner_email": "user3@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 3",
        "country": "USA",
        "category": "Research",
    },
    {
        "id": 4,
        "owner_email": "user4@example.com",
        "status": "Completed",
        "optimization_name": "Mock Optimization 4",
        "country": "Canada",
        "category": "Marketing",
    },
    {
        "id": 5,
        "owner_email": "user5@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 5",
        "country": "USA",
        "category": "Sales",
    },
    {
        "id": 5,
        "owner_email": "user5@example.com",
        "status": "In Progress",
        "optimization_name": "Mock Optimization 6",
        "country": "Canada",
        "category": "Marketing",
    },
]
app.logger.info(f"mock_optimizations are{mock_optimizations}")
}





class OptimizationsResource(Resource):
    def get(self):
        args = request.args
        rpp = int(args.get('rpp')) if args.get('rpp') else 50
        page = int(args.get('page')) if args.get('page') else 0
        country = str(args.get('country')) if args.get('country') else None
        category = str(args.get('category')) if args.get('category') else None
        status = (str(args.get('status')).split(',')) if args.get('status') else None
        optimizations = optimization_service.get_optimizations(rpp=rpp,page=page,country=country,category=category, status=status )
        return optimizations

def get_optimizations(rpp, page, country, category, status):
    session = _init_session()
    try:
        q = session.query(Optimization).filter_by(country=country).filter_by(category=category).filter(
            Optimization.status.in_(status)).order_by(desc('created_datetime')).offset(rpp * page).limit(rpp)
        for optimization in q:
            optimization.experiment_params = {}
        row_count = session.query(Optimization).filter_by(country=country).filter_by(category=category).filter(
            Optimization.status.in_(status)).count()
        response_json = json.dumps({'data': optimizations_schema.dump(q), 'row_count': row_count})
        session.commit()
        return json.loads(response_json)

    except Exception as e:
        session.rollback()

    finally:
        session.close()
