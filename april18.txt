MAX_CHUNK_SIZE = 32 * 1024 * 1024
def generate_chunks(file_path):
    app_logger.info(f"Invoking the File Chunk Generator")
    with open(file_path, "rb") as file:
        while True:
            chunk = file.read(MAX_CHUNK_SIZE)
            if not chunk:
                break
            yield chunk
def download_large_file(blob, output_path):
    try:
        app_logger.info(f"Invoking Downloading Large file ")
        # Download the blob to a temporary file
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            blob.download_to_filename(temp_file.name)
        
            # Generate the response using the chunks
            response = Response(
                generate_chunks(temp_file.name),
                mimetype="application/octet-stream"
            )
            app_logger.info(f"Setting Headers for Download_large_files")
            response.headers.set("Content-Disposition", "attachment", filename=output_path)
            response.headers.set("Transfer-Encoding", "chunked")
        return response    
    except Exception as e:
        return {
            "status": http.HTTPStatus.FORBIDDEN,
            "message": f"Could not able to download the file: {str(e)}"
        }
def download_total_df(output_path):
    total_df = get_blob(bucket=get_app_configs().get(OUTPUT_GCS_BUCKET),
                        output_path=output_path,
                        file_part= "base_dtl_data")
    app_logger.info(f"total_df is {total_df}")
    app_logger.info(f"{type(total_df)}")
    storage_client = storage.Client()
    bucket = storage_client.get_bucket(get_app_configs().get(OUTPUT_GCS_BUCKET))
    app_logger.info(f"Bucket name is :{bucket}")
    blob_size = bucket.get_blob(total_df)
    app_logger.info(f"Blob is {blob_size}")
    app_logger.info(f"Blobsize:{blob_size.size}")
    file_size=blob_size.size
    if file_size > MAX_CHUNK_SIZE:
            app_logger.info(f"Downloading Large Chunk size file")
            #return download_large_file(blob_size, output_path)
            return {
                "status":http.HTTPStatus.NO_CONTENT,
                "message":f"file was too large to download.  Please contact the Product Team (gonzalezllorens.z@pg.com) to retrieve the file"
                },download_large_file(blob_size, output_path)
    else:
        app_logger.info(f"Downloading Normal Size file")
        with tempfile.NamedTemporaryFile() as temp:
            blob_size.download_to_filename(temp.name)
            return send_file(temp.name, attachment_filename=total_df)
