    def _cast_template(self, template):

        df = pd.read_csv(template, low_memory=False)
        df.columns = df.columns.str.strip()
        col_dtypes = df.dtypes.to_dict()

        unknown_col = []
        mismatch_col = []
        for col, val in col_dtypes.items():
            if col not in self.benchmark_dtypes.keys():
                unknown_col.append(col)
                df = df.drop([col], axis=1)

            elif val != self.benchmark_dtypes[col]:
                mismatch_col.append({"column_name":col,"expected": self.benchmark_dtypes[col], "detected":val})
                df[col] = df[col].astype(self.benchmark_dtypes[col])
            
        return {"df": df,
                "summary": {"unknown_columns":unknown_col, 
                         "mismatch_columns":mismatch_col}}

from sqlalchemy import Column, String
from sqlalchemy.ext.declarative import declarative_base
from flask_marshmallow import Schema

Base = declarative_base()


class AccessGroups(Base):
    __tablename__ = 'access_groups'
    group_name = Column(String(50), primary_key=True)
    category= Column(String(50))
    category_code = Column(String(10))
    country = Column(String(50))
    country_code = Column(String(10))

    # def as_dict(self):
    #     return {c.name: getattr(self, c.name) for c in self.__table__.columns}


class AccessGroupsSchema(Schema):
    class Meta:
        fields = ("group_name", "category", "category_code", "country", "country_code")
        model = AccessGroups

access_groups_schema = AccessGroupsSchema()
access_groups_list_schema = AccessGroupsSchema(many=True)
