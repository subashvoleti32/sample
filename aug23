ERROR api/test/unittests/test_audience_template/test_audience_template.py - google.auth.exceptions.DefaultCredentialsError: Your default credentials were not found. To set up Application Default Credentials, see https://cloud.google.com/docs/authentication/external/set-up-adc for more information.
ERROR api/test/unittests/test_get_audience/test_get_audience_api.py - google.auth.exceptions.DefaultCredentialsError: Your default credentials were not found. To set up Application Default Credentials, see https://cloud.google.com/docs/authentication/external/set-up-adc for more information.
import pytest
from fastapi.testclient import TestClient

from api.src.controller.application import app


@pytest.fixture
def test_client():
    return TestClient(app)


ca_audience_template_response = {
    "min_age": 16,
    "max_age": 120,
    "country": "CA",
    "gender": [{"value": "f", "label": "Female"}, {"value": "m", "label": "Male"}],
    "audience_attributes": [
        {
            "attribute_name": "region",
            "attribute_value": [
                {"value": "quebec", "label": "French Speaking Regions"},
                {"value": "national", "label": "English Speaking Regions"},
            ],
        }
    ],
}
us_audience_template_response = {
    "min_age": 18,
    "max_age": 99,
    "country": "US",
    "gender": [
        {"value": "Female", "label": "Female"},
        {"value": "Male", "label": "Male"},
    ],
    "audience_attributes": [
        {
            "attribute_name": "race",
            "attribute_value": [
                {"value": "HA", "label": "Hispanic American"},
                {"value": "AA", "label": "African American"},
            ],
        },
        {
            "attribute_name": "origin",
            "attribute_value": [{"value": "unknown", "label": "Origin"}],
        },
    ],
}


################TEST CASE - CHECK CA AUDIENCE TEMPLATE STATUS AND RESPONSE CODE #########
def test_get_attribute_by_country_ca():
    client = TestClient(app)
    response = client.get("/ltvo-audience/v1/audience_template?country=CA")
    assert response.status_code == 200
    print(response.json())
    assert response.json() == ca_audience_template_response


################TEST CASE - CHECK US AUDIENCE TEMPLATE STATUS AND RESPONSE CODE #########
def test_get_attribute_by_country_us():
    client = TestClient(app)
    response = client.get("/ltvo-audience/v1/audience_template?country=US")
    assert response.status_code == 200
    assert response.json() == us_audience_template_response

from fastapi import APIRouter
from google.cloud import spanner

from ..model.attribute_model import sessionLocal
from ..model.attribute_model import tracks

audience_template_route = APIRouter(
    prefix="/ltvo-audience/v1", tags=["Audience_Template"]
)

from fastapi import FastAPI, HTTPException

from ..config.env_var import settings

# Instantiate a client.
spanner_client = spanner.Client()

# Get a Cloud Spanner instance by ID.
instance_id = settings.instance_id
instance = spanner_client.instance(instance_id)

db = sessionLocal()
database_id = settings.database_id
database = instance.database(database_id)


def audience_template_output():
    templates_output = []
    with database.snapshot() as snapshot:
        results = snapshot.execute_sql("SELECT *from template_audience")

        for row in results:
            templates_output.append(row)
    output_list1 = [
        {
            "min_age": item[0],
            "max_age": item[1],
            "country": item[2],
            "audience_attributes": item[3],
        }
        for item in templates_output
    ]
    return output_list1


def attribute_values_output():
    attribute_values_output = []
    with database.snapshot() as snapshot:
        results = snapshot.execute_sql("SELECT *from template_attribute_values")

        for row in results:
            attribute_values_output.append(row)
    output_list1 = [
        {
            "Country": item[0],
            "Parent Attribute Name": item[1],
            "Audience Attribute Value": item[2],
            "Audience Attribute Label": item[3],
            "Audience Attribute Description": item[4],
        }
        for item in attribute_values_output
    ]
    return output_list1
def default_attributes_values_output():
    attribute_values_output=[]
    with database.snapshot() as snapshot:
        results = snapshot.execute_sql("SELECT *from attributes_value_label")

        for row in results:
            attribute_values_output.append(row)
    output_list1 = [
        {
            "Country": item[0],
            "Parent Attribute Name": item[1],
            "Audience Attribute Value": item[2],
            "Audience Attribute Label": item[4],
            "Audience Attribute Description": item[5],
        }
        for item in attribute_values_output
    ]
    return output_list1
    

TEMPLATES = audience_template_output()

ATTRIBUTE_VALUES = attribute_values_output()
DEFAULT_ATTRIBUTE_VALUES=default_attributes_values_output()
# def default_attribute_values_output(country):
#     try:
#             db_res2 = (
#                 db.query(tracks)
#                 .filter(tracks.c.country_code == country)
#                 .all()
#             )
#     except Exception as e:
#         print(f'Exception as {e}')
#     default_attribute_output=[
#         {
#             "attribute":item[1]
#         }
#         for item in db_res2
#     ]
#     return default_attribute_output
    
    
app = FastAPI()


def get_audience_attributes(country):
    attributes = {}
    for attr in ATTRIBUTE_VALUES:
        if attr["Country"] == country:
            parent_attr_name = attr["Parent Attribute Name"]
            if parent_attr_name not in attributes:
                attributes[parent_attr_name] = []
            attributes[parent_attr_name].append(
                {
                    "value": attr["Audience Attribute Value"],
                    "label": attr["Audience Attribute Label"],
                }
            )
    return attributes

def get_default_audience_attributes(country):
    attributes={}
    for attr in DEFAULT_ATTRIBUTE_VALUES:
        if attr["Country"] == country:
            parent_attr_name = attr["Parent Attribute Name"]
            if parent_attr_name not in attributes:
                attributes[parent_attr_name] = []
            attributes[parent_attr_name].append(
                {
                    "value":attr["Audience Attribute Value"],
                    "label":attr["Audience Attribute Label"]
                }
            )
    return attributes

@audience_template_route.get("/audience_template")
async def get_template(country: str):
    
    existing_countries = {}  # type: ignore
    for template in TEMPLATES:
        existing_countries[template["country"]] = (
            existing_countries.get(template["country"], 0) + 1
        )

    if existing_countries.get(country, 0) > 1:
        raise HTTPException(
            status_code=400,
            detail=f"Country template {country} is already present.It cannot be duplicated",
        )
    template = next((t for t in TEMPLATES if t["country"] == country), None)
    if template is None:
        raise HTTPException(status_code=400, detail="Country Not Found")
    response = {
        "min_age": template["min_age"],
        "max_age": template["max_age"],
        "country": template["country"],
        "gender": get_audience_attributes(country).get("gender", []),
        "default_attributes": [
            {"attribute_name": attr, "attribute_value": values}
            for attr, values in get_audience_attributes(country).items()
            if attr != "gender"
        ],
        "audience_attributes":[
            {"attribute_name":attr,"attribute_value":values}
            for attr,values in get_default_audience_attributes(country).items()
            if attr!="gender"
        ]
    }
    return response

import pytest
from fastapi.testclient import TestClient

from api.src.controller.application import app, get_db
from api.src.config.env_var import settings
from api.src.router.audience_template_route import get_audience_attributes
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine,MetaData
from sqlalchemy.exc import SQLAlchemyError
from google.cloud import spanner
projectid=settings.project_id
instanceid=settings.instance_id
databaseid=settings.database_id

client = spanner.Client()
database = client.instance(instanceid).database(databaseid)
@pytest.fixture
def test_client():
    return TestClient(app)
@pytest.fixture(scope="function")
def test_db():
    engine = create_engine(
    "spanner+spanner:///projects/"
    + projectid
    + "/instances/"
    + instanceid
    + "/databases/"
    + databaseid
) 
    
    metadata = MetaData(bind=engine)
    print(metadata)
    TestSessionLocal = sessionmaker(bind=engine)
    db = TestSessionLocal()
    def get_db_for_testing():
        try:
            yield db
            db.commit()
        except SQLAlchemyError as e:
            assert e is not None
            db.rollback()
    app.dependency_overrides[get_db] = get_db_for_testing

    # 2. Execute test cases
    yield db

ATTRIBUTE_VALUES = [
    {
        "Country": "US",
        "Parent_Attribute_Name": "gender",
        "Audience_Attribute_Value": "Male",
        "Audience_Attribute_Label": "Male",
        "Audience_Attribute_Description": "HI",
    },
    {
        "Country": "US",
        "Parent_Attribute_Name": "gender",
        "Audience_Attribute_Value": "Female",
        "Audience_Attribute_Label": "Female",
        "Audience_Attribute_Description": "Hello",
    },
    {
        "Country": "US",
        "Parent_Attribute_Name": "race",
        "Audience_Attribute_Value": "AA",
        "Audience_Attribute_Label": "African American",
        "Audience_Attribute_Description": "Bye",
    },
    {
        "Country": "US",
        "Parent_Attribute_Name": "race",
        "Audience_Attribute_Value": "HA",
        "Audience_Attribute_Label": "Hispanic American",
        "Audience_Attribute_Description": "Do",
    },
    {
        "Country": "US",
        "Parent_Attribute_Name": "origin",
        "Audience_Attribute_Value": "unknown",
        "Audience_Attribute_Label": "Origin",
        "Audience_Attribute_Description": "something",
    },
    {
        "Country": "CA",
        "Parent_Attribute_Name": "gender",
        "Audience_Attribute_Value": "m",
        "Audience_Attribute_Label": "Male",
        "Audience_Attribute_Description": "special",
    },
    {
        "Country": "CA",
        "Parent_Attribute_Name": "gender",
        "Audience_Attribute_Value": "f",
        "Audience_Attribute_Label": "Female",
        "Audience_Attribute_Description": "Welcome",
    },
    {
        "Country": "CA",
        "Parent_Attribute_Name": "region",
        "Audience_Attribute_Value": "national",
        "Audience_Attribute_Label": "English Speaking Regions",
        "Audience_Attribute_Description": "Welcome1",
    },
    {
        "Country": "CA",
        "Parent_Attribute_Name": "region",
        "Audience_Attribute_Value": "quebec",
        "Audience_Attribute_Label": "French Speaking Regions",
        "Audience_Attribute_Description": "ABD",
    },
]



def store_attribute_values_data():
    with database.batch() as batch:
        for attr in ATTRIBUTE_VALUES:
            batch.insert(
                table="template_attribute_values1",
                columns=(
                    "Country",
                    "Parent_Attribute_Name",
                    "Audience_Attribute_Value",
                    "Audience_Attribute_Label",
                    "Audience_Attribute_Description",
                ),
                values=[
                    (
                        attr["Country"],
                        attr["Parent_Attribute_Name"],
                        attr["Audience_Attribute_Value"],
                        attr["Audience_Attribute_Label"],
                        attr["Audience_Attribute_Description"],
                    )
                ],
            )
def get_attribute_values_output():
    attribute_values_output = []
    with database.snapshot() as snapshot:
        results = snapshot.execute_sql("SELECT *from template_attribute_values1")

        for row in results:
            attribute_values_output.append(row)
    output_list1 = [
        {
            "Country": item[0],
            "Parent Attribute Name": item[1],
            "Audience Attribute Value": item[2],
            "Audience Attribute Label": item[3],
            "Audience Attribute Description": item[4],
        }
        for item in attribute_values_output
    ]
    return output_list1
            
def test_sample_audience_template():
    client=TestClient(app)
    store_attribute_values_data()
    ATTRIBUTE_VALUES=get_attribute_values_output()
    print(ATTRIBUTE_VALUES)
    get_audience_attributes()
    response = client.get("/ltvo-audience/v1/audience_template?country=CA")
    assert response.status_code == 200
    print(response.json())
    assert response.json() == ca_audience_template_response

    
ca_audience_template_response = {
  "min_age": 16,
  "max_age": 120,
  "country": "CA",
  "gender": [
    {
      "value": "f",
      "label": "Female"
    },
    {
      "value": "m",
      "label": "Male"
    }
  ],
  "default_attributes": [
    {
      "attribute_name": "region",
      "attribute_value": [
        {
          "value": "quebec",
          "label": "French Speaking Regions"
        },
        {
          "value": "national",
          "label": "English Speaking Regions"
        }
      ]
    }
  ],
  "audience_attributes": [
    {
      "attribute_name": "age",
      "attribute_value": [
        {
          "value": "36-42",
          "label": "36 to 42"
        },
        {
          "value": "18+",
          "label": "18+"
        },
        {
          "value": "50-60",
          "label": "50 to 60"
        }
      ]
    },
    {
      "attribute_name": "race",
      "attribute_value": [
        {
          "value": "3",
          "label": "Black"
        },
        {
          "value": "4",
          "label": "Asian/Pacific"
        }
      ]
    }
  ]
}
us_audience_template_response = {
  "min_age": 18,
  "max_age": 99,
  "country": "US",
  "gender": [
    {
      "value": "Female",
      "label": "Female"
    },
    {
      "value": "Male",
      "label": "Male"
    }
  ],
  "default_attributes": [
    {
      "attribute_name": "race",
      "attribute_value": [
        {
          "value": "HA",
          "label": "Hispanic American"
        },
        {
          "value": "AA",
          "label": "African American"
        }
      ]
    },
    {
      "attribute_name": "origin",
      "attribute_value": [
        {
          "value": "unknown",
          "label": "Origin"
        }
      ]
    }
  ],
  "audience_attributes": [
    {
      "attribute_name": "age",
      "attribute_value": [
        {
          "value": "18+",
          "label": "18+"
        },
        {
          "value": "50-60",
          "label": "50 to 60"
        },
        {
          "value": "36-42",
          "label": "36 to 42"
        }
      ]
    },
    {
      "attribute_name": "race",
      "attribute_value": [
        {
          "value": "4",
          "label": "Asian/Pacific"
        },
        {
          "value": "3",
          "label": "Black"
        }
      ]
    }
  ]
}


################TEST CASE - CHECK CA AUDIENCE TEMPLATE STATUS AND RESPONSE CODE #########
def test_get_attribute_by_country_ca():
    client = TestClient(app)
    response = client.get("/ltvo-audience/v1/audience_template?country=CA")
    assert response.status_code == 200
    print(response.json())
    assert response.json() == ca_audience_template_response


################TEST CASE - CHECK US AUDIENCE TEMPLATE STATUS AND RESPONSE CODE #########
def test_get_attribute_by_country_us():
    client = TestClient(app)
    response = client.get("/ltvo-audience/v1/audience_template?country=US")
    assert response.status_code == 200
    assert response.json() == us_audience_template_response


#####################TESTCASE CHECK WITH DIFFERENT COUNTRY STATUS CODE AND RESPONSE########


def test_get_attribute_by_invalid_country():
    client = TestClient(app)
    response = client.get("/ltvo-audience/v1/audience_template?country=USA")
    assert response.status_code == 400
    print(response.json())
    assert response.json() == {"detail": "Country Not Found"}


#########################TESTCASE CHECKING MISSING COUNTRY###########################
def test_get_attribute_by_missing_country():
    client = TestClient(app)
    response = client.get("/ltvo-audience/v1/audience_template")
    assert response.status_code == 422
    print(response.json())
    assert response.json() == {
        "detail": [
            {
                "loc": ["query", "country"],
                "msg": "field required",
                "type": "value_error.missing",
            }
        ]
    }


#######################TESTCASE INVALID QUERY PARAMETER###############################
def test_get_attribute_by_invalid_query_parameter():
    client = TestClient(app)
    response = client.get("/ltvo-audience/v1/audience_template?invalid_param=test")
    assert response.status_code == 422
    print(response.json())
    assert response.json() == {
        "detail": [
            {
                "loc": ["query", "country"],
                "msg": "field required",
                "type": "value_error.missing",
            }
        ]
    }


#######################################################################################
